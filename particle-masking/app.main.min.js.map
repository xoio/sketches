{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/shaders/plane.vert","webpack:///./src/shaders/plane.frag","webpack:///./src/shaders/flipperRender.vert","webpack:///./src/shaders/flipperRender.frag","webpack:///./src/shaders/petalSim.glsl","webpack:///./src/shaders/petalRender.vert","webpack:///./src/shaders/petalRender.frag","webpack:///./src/jirachi/shaders/utils.glsl","webpack:///./src/jirachi/shaders/noise/curl.glsl","webpack:///./src/jirachi/core/gl.ts","webpack:///./src/jirachi/math/common/matrix.ts","webpack:///./src/jirachi/math/mat4.ts","webpack:///./src/jirachi/math/vec3.ts","webpack:///./src/jirachi/framework/camera.ts","webpack:///./src/jirachi/math/mat3.ts","webpack:///./src/jirachi/utils.ts","webpack:///./src/jirachi/core/formats.ts","webpack:///./src/jirachi/core/texture.ts","webpack:///./src/jirachi/core/fbo.ts","webpack:///./src/jirachi/core/vbo.ts","webpack:///./src/jirachi/core/vao.ts","webpack:///./src/jirachi/framework/mesh.ts","webpack:///./src/jirachi/geometry/plane.ts","webpack:///./src/jirachi/core/shader.ts","webpack:///./src/jirachi/geometry/quad.ts","webpack:///./src/ImageFlipper.ts","webpack:///./src/jirachi/framework/TransformFeedback.ts","webpack:///./src/jirachi/math/core.ts","webpack:///./src/ParticleSystem.ts","webpack:///./src/jirachi/loaders/ObjLoader.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Context","width","window","innerWidth","height","innerHeight","this","viewportX","viewportY","[object Object]","x","y","canvas","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","g","b","a","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","bindTexture","TEXTURE_2D","customResizeCallback","parentElement","setViewport","addEventListener","glMatrix","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","ENABLE_SIMD","SIMD_AVAILABLE","USE_SIMD","setMatrixArrayType","type","degree","PI","toRadian","equals","abs","max","matrix","SIMD","undefined","mat4","scalar","out","clone","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","a0","a1","a2","a3","tmp01","tmp23","out0","out1","out2","out3","Float32x4","load","shuffle","store","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","row0","row1","row2","row3","tmp1","minor0","minor1","minor2","minor3","mul","swizzle","sub","add","reciprocalApproximation","adjoint","determinant","multiply","b0","b1","b2","b3","translate","v","z","vec","t0","scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","splat","a_1","a_2","rotateY","a_0","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","getTranslation","mat","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","str","frob","pow","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","math_mat4","vec3","divide","div","ceil","floor","min","round","scaleAndAdd","distance","dist","squaredDistance","sqrDist","length","squaredLength","sqrLen","negate","inverse","normalize","dot","cross","ax","ay","az","bx","by","bz","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","forEach","stride","offset","count","fn","arg","angle","tempA","tempB","cosine","acos","math_vec3","camera_CameraBase","target","position","vector","aCenter","viewMatrix","zoom","cameraLookAt","mat3","fromMat4","fromMat2d","normalFromMat4","logError","message","renderImmediate","console","log","formats_TextureFormat","gl","data","isdepth","wrapS","CLAMP_TO_EDGE","wrapT","minFilter","NEAREST","magFilter","internalFormat","RGB","format","texelType","UNSIGNED_BYTE","level","flipY","attachments","val","ShaderFormat","vertex","fragment","version","varyings","feedbackMode","uniforms","attributes","outputs","source","sources","join","uni","push","ver","texture","tex","createTexture","GLTexture","assign","_checkData","Image","loadImage","loadBlankTexture","index","activeTexture","settings","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","WebGLRenderingContext","texImage2D","depthType","UNSIGNED_SHORT","DEPTH_COMPONENT","loadData","options","generateMipMaps","generateMipmap","image","pixelStorei","UNPACK_FLIP_Y_WEBGL","h","contents","core_fbo","fbo","createFramebuffer","Fbo","build","depthTexture","framebufferTexture2D","FRAMEBUFFER","COLOR_ATTACHMENT0","attachment","slot","status","checkFramebufferStatus","_throwError","unbind","bindFramebuffer","attachmetnIndex","resize","texFormat","FRAMEBUFFER_UNSUPPORTED","Error","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_COMPLETE","error","vbo","indexed","createBuffer","IndexVbo","Vbo","bufferData","bindBuffer","ARRAY_BUFFER","usage","STATIC_DRAW","bufferSubData","ELEMENT_ARRAY_BUFFER","vao","createVertexArray","Vao","bindVertexArray","attribute","divisor","vertexAttribDivisor","idx","enableVertexAttribArray","disableVertexAttribArray","enableAttrib","disableAttrib","size","FLOAT","normalized","FALSE","vertexAttribPointer","mesh_Mesh","shader","geometry","framebuffer","isIndexed","isInstanced","modelMatrix","attribData","numVertices","primMode","TRIANGLES","_processGeometry","pos","camera","uniform","projectionMatrix","_enableAttributes","indexVbo","drawElementsInstanced","numItems","drawArraysInstanced","drawElements","drawArrays","_disableAttributes","geo","addAttribute","vertices","uvs","indices","addIndexBuffer","attrib","location","disable","getColorTexture","warn","arr","Uint16Array","buffer","makeInstancedAttribute","assignData","loc","bindAttribLocation","itms","num","Plane","nx","ny","normals","quads","resolution","u","itm","core_shader","spec","createProgram","Shader","glsl","loadShader","precision","vShader","_compileShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","attachShader","_parseTransformFeedback","linkProgram","deleteShader","getProgramParameter","LINK_STATUS","_parseActiveAttributes","_parseActiveUniforms","getProgramInfoLog","useProgram","deleteProgram","numUniforms","ACTIVE_UNIFORMS","info","getActiveUniform","getUniformLocation","setVaryings","attribs","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","createShader","shaderTypeName","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","transformFeedbackVaryings","toString","vec2","search","float","int","uniform2fv","uniform3fv","uniform1i","uniform1f","uniformMatrix4fv","uniformMatrix3fv","Quad","ImageFlipper_ImageFlipper","assets","setWidth","setHeight","planeShader","plane_default","shaders_plane_default","planeRenderShader","flipperRender_default","shaders_flipperRender_default","planeMesh","setFbo","quad","planeRender","planeRenderMesh","draw","unbindTexture","framework_TransformFeedback","flag","tf","createTransformFeedback","SEPARATE_ATTRIBS","feedbackPrim","POINTS","vaos","buffer2","vbos","src","dst","RASTERIZER_DISCARD","bindTransformFeedback","TRANSFORM_FEEDBACK","_bindBufferBase","_enableVertexAttribs","beginTransformFeedback","endTransformFeedback","_unbindBufferBase","varying","addVarying","vertexSource","fragmentSource","setFeedbackMode","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","flattenArray","array","reSize","fin","map","randVec4","ParticleSystem_ParticleSystem","numParticles","simShader","curl_default","petalSim_default","setShader","renderShader","utils_default","petalRender_default","shaders_petalRender_default","_loadGeometry","perf","performance","now","update","petal","positions","velocity","originData","vel","_build","petalGeo","coords","addInstancedAttributeBuffer","getAttributeData","addInstancedAttribute","ObjLoader","path","parse","Promise","res","rej","fetch","then","text","_model","catch","e","objStr","lines","split","finalNormals","result","vertexPattern","normalPattern","uvPattern","facePattern1","facePattern2","facePattern3","facePattern4","parseVertexIndex","parseInt","parseNormalIndex","parseUVIndex","addVertex","addUV","addNormal","addFace","ua","ub","uc","ud","na","nb","nc","nd","id","ia","ib","ic","line","trim","charAt","exec","parseFloat","loaders_ObjLoader","ps","img","flipper","app_fbo","app_gl","document","createElement","glOptions","alpha","antialias","depth","getContext","core_gl","body","appendChild","super","aspectRatio","animate","requestAnimationFrame","clearScreen","getOutput","setZoom","onload"],"mappings":"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","file":"app.main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = \"uniform mat4 projectionMatrix;\\r\\nuniform mat4 viewMatrix;\\r\\nuniform mat4 modelMatrix;\\r\\nuniform bool isRendering;\\r\\nuniform vec2 resolution;\\r\\nin vec3 position;\\r\\nin vec2 uv;\\r\\n\\r\\nout vec4 vCol;\\r\\nout vec2 vUv;\\r\\nvoid main(){\\r\\n    vUv = uv;\\r\\n    vec3 pos = position;\\r\\n\\r\\n    pos.xy *= vec2(0.03);\\r\\n\\r\\n    vCol = modelMatrix * vec4(1.);\\r\\n\\r\\n    gl_Position = projectionMatrix * modelMatrix * viewMatrix * vec4(pos,1.);\\r\\n}\\r\\n\"","module.exports = \"precision highp float;\\r\\n\\r\\nuniform sampler2D uTex0;\\r\\nin vec2 vUv;\\r\\nout vec4 glFragColor;\\r\\nin vec4 vCol;\\r\\nvoid main(){\\r\\n    glFragColor = texture(uTex0,vec2(vUv.x,1.0 - vUv.y));\\r\\n    //glFragColor = vec4(1.0,1.0,0.0,1.0);\\r\\n}\"","module.exports = \"uniform mat4 projectionMatrix;\\r\\nuniform mat4 viewMatrix;\\r\\nuniform mat4 modelMatrix;\\r\\n\\r\\nin vec2 position;\\r\\n\\r\\nout vec2 vUv;\\r\\nvoid main(){\\r\\n    vUv = vec2(0.0,1.0) + vec2(0.5,-0.5) * (position + 1.0);\\r\\n    gl_Position = vec4(position,0.0,1.);\\r\\n}\\r\\n\"","module.exports = \"precision highp float;\\r\\n\\r\\nuniform sampler2D uTex0;\\r\\nin vec2 vUv;\\r\\nout vec4 glFragColor;\\r\\n\\r\\nvoid main(){\\r\\n    glFragColor = texture(uTex0,vUv);\\r\\n}\"","module.exports = \"\\r\\n\\r\\n/**\\r\\nTransform feedback simulation for moving particle system across the screen\\r\\n*/\\r\\n\\r\\nin vec4 position;\\r\\nin vec3 velocity;\\r\\nin vec3 origin;\\r\\nuniform float time;\\r\\nout vec4 oPos;\\r\\nout vec3 oVel;\\r\\nvoid main(){\\r\\n    oPos = position;\\r\\n    oVel = velocity;\\r\\n\\r\\n    // alpha holds life , when less than 0, reset ps\\r\\n    if(oPos.a < 0.0){\\r\\n        oPos.a = 1.0;\\r\\n        oVel = vec3(0.);\\r\\n        oPos.xyz = origin.xyz;\\r\\n    }else {\\r\\n\\r\\n        vec3 curl = curlNoise( oPos.xyz *0.1 );\\r\\n        oVel += curl * 0.01 * sin(time );\\r\\n        oVel *= 0.97;\\r\\n        oVel.z += 0.002;\\r\\n\\r\\n        oPos.xyz += oVel;\\r\\n        oPos.a -= 0.005;\\r\\n    }\\r\\n\\r\\n}\"","module.exports = \"\\r\\nuniform mat4 projectionMatrix;\\r\\nuniform mat4 modelViewMatrix;\\r\\nuniform float time;\\r\\nin vec3 position;\\r\\nin vec4 iPosition;\\r\\nin float iScale;\\r\\nout float vAlpha;\\r\\nvoid main(){\\r\\n\\r\\n    gl_PointSize = 5.0;\\r\\n\\r\\n    vec3 pos = position;\\r\\n    pos.x *= iScale;\\r\\n    pos.y *= iScale;\\r\\n    pos.z *= iScale;\\r\\n\\r\\n    vec3 rotPos = rotateX(pos,time * iScale * 0.5);\\r\\n    rotPos = rotateY(rotPos,time * iScale * 0.5);\\r\\n    rotPos = rotateZ(rotPos,time * iScale * 0.5);\\r\\n\\r\\n    //vec4 pos = vec4(position + iPosition.xyz,1.);\\r\\n    vec4 finalPos = vec4(rotPos + iPosition.xyz,1.);\\r\\n    vAlpha = iPosition.a;\\r\\n\\r\\n    gl_Position = projectionMatrix * modelViewMatrix * finalPos;\\r\\n    //gl_Position =  vec4(position,1.);\\r\\n\\r\\n}\"","module.exports = \"precision highp float;\\r\\nuniform vec2 resolution;\\r\\nuniform sampler2D uTex0;\\r\\nuniform float time;\\r\\n\\r\\nout vec4 glFragColor;\\r\\nin float vAlpha;\\r\\n\\r\\nconst vec3 baseColor = vec3(212.0,32.0,133.0);\\r\\n\\r\\nvoid main() {\\r\\n    vec2 uv = gl_FragCoord.xy / resolution;\\r\\n    vec3 color = normalize(baseColor);\\r\\n\\r\\n    vec4 dat = texture(uTex0,vec2(uv.x,1.0 -uv.y));\\r\\n\\r\\n    // Time varying pixel color\\r\\n    vec3 col = 0.5 + 0.5*sin(color * time+uv.xyx+vec3(1,0,2));\\r\\n    col = mix(color,col,0.8) + 0.2;\\r\\n\\r\\n    dat*=dat;\\r\\n\\r\\n    glFragColor = dat * vec4(col,1.);\\r\\n    //glFragColor.a = vAlpha;\\r\\n    glFragColor.a = mix(1.0,0.0,vAlpha);\\r\\n}\\r\\n\"","module.exports = \"vec3 rotateX(vec3 p, float theta){\\r\\n  float s = sin(theta);\\r\\n  float c = cos(theta);\\r\\n  return vec3(p.x, p.y * c - p.z * s, p.z * c + p.y * s);\\r\\n}\\r\\n\\r\\nvec3 rotateY(vec3 p, float theta) {\\r\\n  float s = sin(theta);\\r\\n  float c = cos(theta);\\r\\n  return vec3(p.x * c + p.z * s, p.y, p.z * c - p.x * s);\\r\\n}\\r\\n\\r\\nvec3 rotateZ(vec3 p, float theta) {\\r\\n  float s = sin(theta);\\r\\n  float c = cos(theta);\\r\\n  return vec3(p.x * c - p.y * s, p.y * c + p.x * s, p.z);\\r\\n}\\r\\n\\r\\n\"","module.exports = \"//\\r\\n// Description : Array and textureless GLSL 2D simplex noise function.\\r\\n// Author : Ian McEwan, Ashima Arts.\\r\\n// Maintainer : ijm\\r\\n// Lastmod : 20110822 (ijm)\\r\\n// License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\r\\n// Distributed under the MIT License. See LICENSE file.\\r\\n// https://github.com/ashima/webgl-noise\\r\\n//\\r\\n\\r\\nvec3 mod289(vec3 x) {\\r\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\r\\n}\\r\\n\\r\\nvec2 mod289(vec2 x) {\\r\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\r\\n}\\r\\n\\r\\nvec3 permute(vec3 x) {\\r\\n  return mod289(((x*34.0)+1.0)*x);\\r\\n}\\r\\n\\r\\nfloat snoise(vec2 v)\\r\\n  {\\r\\n  const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0))/6.0\\r\\n                      0.366025403784439, // 0.5*(sqrt(3.0)-1.0)\\r\\n                     -0.577350269189626, // -1.0 + 2.0 * C.x\\r\\n                      0.024390243902439); // 1.0 / 41.0\\r\\n// First corner\\r\\n  vec2 i = floor(v + dot(v, C.yy) );\\r\\n  vec2 x0 = v - i + dot(i, C.xx);\\r\\n\\r\\n// Other corners\\r\\n  vec2 i1;\\r\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\r\\n  //i1.y = 1.0 - i1.x;\\r\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\r\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\r\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\r\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\r\\n  vec4 x12 = x0.xyxy + C.xxzz;\\r\\n  x12.xy -= i1;\\r\\n\\r\\n// Permutations\\r\\n  i = mod289(i); // Avoid truncation effects in permutation\\r\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\r\\n+ i.x + vec3(0.0, i1.x, 1.0 ));\\r\\n\\r\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\r\\n  m = m*m ;\\r\\n  m = m*m ;\\r\\n\\r\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\r\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\r\\n\\r\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\r\\n  vec3 h = abs(x) - 0.5;\\r\\n  vec3 ox = floor(x + 0.5);\\r\\n  vec3 a0 = x - ox;\\r\\n\\r\\n// Normalise gradients implicitly by scaling m\\r\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\r\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\r\\n\\r\\n// Compute final noise value at P\\r\\n  vec3 g;\\r\\n  g.x = a0.x * x0.x + h.x * x0.y;\\r\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\r\\n  return 130.0 * dot(m, g);\\r\\n}\\r\\n\\r\\n//\\r\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\r\\n// noise functions.\\r\\n// Author : Ian McEwan, Ashima Arts.\\r\\n// Maintainer : ijm\\r\\n// Lastmod : 20110822 (ijm)\\r\\n// License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\r\\n// Distributed under the MIT License. See LICENSE file.\\r\\n// https://github.com/ashima/webgl-noise\\r\\n//\\r\\n\\r\\n\\r\\nvec4 mod289(vec4 x) {\\r\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\r\\n}\\r\\n\\r\\nvec4 permute(vec4 x) {\\r\\n     return mod289(((x*34.0)+1.0)*x);\\r\\n}\\r\\n\\r\\nvec4 taylorInvSqrt(vec4 r)\\r\\n{\\r\\n  return 1.79284291400159 - 0.85373472095314 * r;\\r\\n}\\r\\n\\r\\nfloat snoise(vec3 v)\\r\\n  {\\r\\n  const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;\\r\\n  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\\r\\n\\r\\n// First corner\\r\\n  vec3 i = floor(v + dot(v, C.yyy) );\\r\\n  vec3 x0 = v - i + dot(i, C.xxx) ;\\r\\n\\r\\n// Other corners\\r\\n  vec3 g = step(x0.yzx, x0.xyz);\\r\\n  vec3 l = 1.0 - g;\\r\\n  vec3 i1 = min( g.xyz, l.zxy );\\r\\n  vec3 i2 = max( g.xyz, l.zxy );\\r\\n\\r\\n  // x0 = x0 - 0.0 + 0.0 * C.xxx;\\r\\n  // x1 = x0 - i1 + 1.0 * C.xxx;\\r\\n  // x2 = x0 - i2 + 2.0 * C.xxx;\\r\\n  // x3 = x0 - 1.0 + 3.0 * C.xxx;\\r\\n  vec3 x1 = x0 - i1 + C.xxx;\\r\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\r\\n  vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y\\r\\n\\r\\n// Permutations\\r\\n  i = mod289(i);\\r\\n  vec4 p = permute( permute( permute(\\r\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\r\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\r\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\r\\n\\r\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\r\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\r\\n  float n_ = 0.142857142857; // 1.0/7.0\\r\\n  vec3 ns = n_ * D.wyz - D.xzx;\\r\\n\\r\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)\\r\\n\\r\\n  vec4 x_ = floor(j * ns.z);\\r\\n  vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)\\r\\n\\r\\n  vec4 x = x_ *ns.x + ns.yyyy;\\r\\n  vec4 y = y_ *ns.x + ns.yyyy;\\r\\n  vec4 h = 1.0 - abs(x) - abs(y);\\r\\n\\r\\n  vec4 b0 = vec4( x.xy, y.xy );\\r\\n  vec4 b1 = vec4( x.zw, y.zw );\\r\\n\\r\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\r\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\r\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\r\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\r\\n  vec4 sh = -step(h, vec4(0.0));\\r\\n\\r\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\r\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\r\\n\\r\\n  vec3 p0 = vec3(a0.xy,h.x);\\r\\n  vec3 p1 = vec3(a0.zw,h.y);\\r\\n  vec3 p2 = vec3(a1.xy,h.z);\\r\\n  vec3 p3 = vec3(a1.zw,h.w);\\r\\n\\r\\n//Normalise gradients\\r\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\r\\n  p0 *= norm.x;\\r\\n  p1 *= norm.y;\\r\\n  p2 *= norm.z;\\r\\n  p3 *= norm.w;\\r\\n\\r\\n// Mix final noise value\\r\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\r\\n  m = m * m;\\r\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\r\\n                                dot(p2,x2), dot(p3,x3) ) );\\r\\n  }\\r\\n\\r\\n\\r\\n  //\\r\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\r\\n// noise functions.\\r\\n// Author : Ian McEwan, Ashima Arts.\\r\\n// Maintainer : ijm\\r\\n// Lastmod : 20110822 (ijm)\\r\\n// License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\r\\n// Distributed under the MIT License. See LICENSE file.\\r\\n// https://github.com/ashima/webgl-noise\\r\\n//\\r\\n\\r\\nfloat mod289(float x) {\\r\\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\\r\\n\\r\\nfloat permute(float x) {\\r\\n     return mod289(((x*34.0)+1.0)*x);\\r\\n}\\r\\n\\r\\n\\r\\nfloat taylorInvSqrt(float r)\\r\\n{\\r\\n  return 1.79284291400159 - 0.85373472095314 * r;\\r\\n}\\r\\n\\r\\nvec4 grad4(float j, vec4 ip)\\r\\n  {\\r\\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\r\\n  vec4 p,s;\\r\\n\\r\\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\r\\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\r\\n  s = vec4(lessThan(p, vec4(0.0)));\\r\\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\\r\\n\\r\\n  return p;\\r\\n  }\\r\\n\\r\\nfloat snoise(vec4 v)\\r\\n  {\\r\\n  const vec4 C = vec4( 0.138196601125011, // (5 - sqrt(5))/20 G4\\r\\n                        0.276393202250021, // 2 * G4\\r\\n                        0.414589803375032, // 3 * G4\\r\\n                       -0.447213595499958); // -1 + 4 * G4\\r\\n\\r\\n// (sqrt(5) - 1)/4 = F4, used once below\\r\\n#define F4 0.309016994374947451\\r\\n\\r\\n// First corner\\r\\n  vec4 i = floor(v + dot(v, vec4(F4)) );\\r\\n  vec4 x0 = v - i + dot(i, C.xxxx);\\r\\n\\r\\n// Other corners\\r\\n\\r\\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\\r\\n  vec4 i0;\\r\\n  vec3 isX = step( x0.yzw, x0.xxx );\\r\\n  vec3 isYZ = step( x0.zww, x0.yyz );\\r\\n// i0.x = dot( isX, vec3( 1.0 ) );\\r\\n  i0.x = isX.x + isX.y + isX.z;\\r\\n  i0.yzw = 1.0 - isX;\\r\\n// i0.y += dot( isYZ.xy, vec2( 1.0 ) );\\r\\n  i0.y += isYZ.x + isYZ.y;\\r\\n  i0.zw += 1.0 - isYZ.xy;\\r\\n  i0.z += isYZ.z;\\r\\n  i0.w += 1.0 - isYZ.z;\\r\\n\\r\\n  // i0 now contains the unique values 0,1,2,3 in each channel\\r\\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\\r\\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\r\\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\r\\n\\r\\n  // x0 = x0 - 0.0 + 0.0 * C.xxxx\\r\\n  // x1 = x0 - i1 + 1.0 * C.xxxx\\r\\n  // x2 = x0 - i2 + 2.0 * C.xxxx\\r\\n  // x3 = x0 - i3 + 3.0 * C.xxxx\\r\\n  // x4 = x0 - 1.0 + 4.0 * C.xxxx\\r\\n  vec4 x1 = x0 - i1 + C.xxxx;\\r\\n  vec4 x2 = x0 - i2 + C.yyyy;\\r\\n  vec4 x3 = x0 - i3 + C.zzzz;\\r\\n  vec4 x4 = x0 + C.wwww;\\r\\n\\r\\n// Permutations\\r\\n  i = mod289(i);\\r\\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\r\\n  vec4 j1 = permute( permute( permute( permute (\\r\\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\r\\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\r\\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\r\\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\r\\n\\r\\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\\r\\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\\r\\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\r\\n\\r\\n  vec4 p0 = grad4(j0, ip);\\r\\n  vec4 p1 = grad4(j1.x, ip);\\r\\n  vec4 p2 = grad4(j1.y, ip);\\r\\n  vec4 p3 = grad4(j1.z, ip);\\r\\n  vec4 p4 = grad4(j1.w, ip);\\r\\n\\r\\n// Normalise gradients\\r\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\r\\n  p0 *= norm.x;\\r\\n  p1 *= norm.y;\\r\\n  p2 *= norm.z;\\r\\n  p3 *= norm.w;\\r\\n  p4 *= taylorInvSqrt(dot(p4,p4));\\r\\n\\r\\n// Mix contributions from the five corners\\r\\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\\r\\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4) ), 0.0);\\r\\n  m0 = m0 * m0;\\r\\n  m1 = m1 * m1;\\r\\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\\r\\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\\r\\n\\r\\n  }\\r\\n// Using  @eddietree implementation from\\r\\n// His brilliant demo 'Artifacts'\\r\\n\\r\\nvec3 snoiseVec3( vec3 x ){\\r\\n\\r\\n  float s  = snoise(vec3( x ));\\r\\n  float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\\r\\n  float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\\r\\n  vec3 c = vec3( s , s1 , s2 );\\r\\n  return c;\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nvec3 curlNoise( vec3 p ){\\r\\n\\r\\n  const float e = 1e-1;\\r\\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\\r\\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\\r\\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\\r\\n\\r\\n  vec3 p_x0 = snoiseVec3( p - dx );\\r\\n  vec3 p_x1 = snoiseVec3( p + dx );\\r\\n  vec3 p_y0 = snoiseVec3( p - dy );\\r\\n  vec3 p_y1 = snoiseVec3( p + dy );\\r\\n  vec3 p_z0 = snoiseVec3( p - dz );\\r\\n  vec3 p_z1 = snoiseVec3( p + dz );\\r\\n\\r\\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\\r\\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\\r\\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\\r\\n\\r\\n  const float divisor = 1.0 / ( 2.0 * e );\\r\\n  return normalize( vec3( x , y , z ) * divisor );\\r\\n}\\r\\n\"","\r\n\r\nexport default function(options={\r\n    canvas:document.createElement(\"canvas\"),\r\n    width:window.innerWidth,\r\n    height:window.innerHeight,\r\n    glOptions:{\r\n        alpha: true,\r\n        antialias: true,\r\n        depth: true\r\n    }\r\n}){\r\n    // build context\r\n    let gl = options.canvas.getContext(\"webgl2\",options.glOptions);\r\n\r\n    // extend GL prototypes\r\n    for(let i in Context.prototype){\r\n        gl[i] = Context.prototype[i];\r\n    }\r\n\r\n    // extend other props onto the context\r\n    Object[\"assign\"](gl,new Context(options.width,options.height));\r\n\r\n    return gl;\r\n}\r\n\r\n/**\r\n * A class that gets augmented on top of a WebGLContext object\r\n * @param width {number} the width for the canvas\r\n * @param height {number} the height for the canvas\r\n * @constructor\r\n */\r\nfunction Context (width=window.innerWidth,height=window.innerHeight){\r\n    this.viewportX = 0;\r\n    this.viewportY = 0;\r\n    this.width = width;\r\n    this.height = height;\r\n}\r\n\r\n\r\n\r\nContext.prototype = {\r\n\r\n    /**\r\n     * Sets the viewport for the context\r\n     * @param x {number} x position\r\n     * @param y {number} y position\r\n     * @param width {number} width for viewport\r\n     * @param height {number} height for viewport\r\n     */\r\n    setViewport(x:number=0,y:number=0,width:number=this.width,height:number=this.height){\r\n        this.viewportX = x;\r\n        this.viewportY = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n\r\n        this.viewport(x,y,width,height);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Clears color buffer bit\r\n     */\r\n    clearColorBit(){\r\n        this.clear(this.COLOR_BUFFER_BIT);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Clears depth buffer bit.\r\n     */\r\n    clearDepthBit(){\r\n        this.clear(this.DEPTH_BUFFER_BIT);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Helper function to set clear color and clear screen in one go.\r\n     * @param r {number} the red component\r\n     * @param g {number} the green component\r\n     * @param b {number} the blue component\r\n     * @param a {number} the alpha component\r\n     */\r\n    clearScreen(r:number=0,g:number=0,b:number=0,a:number=1){\r\n        this.clearColor(r,g,b,a);\r\n        this.viewport(this.viewportX,this.viewportY, this.canvas.width,this.canvas.height);\r\n        this.clear(this.COLOR_BUFFER_BIT | this.DEPTH_BUFFER_BIT);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Enables alpha blending\r\n     */\r\n    enableAlphaBlending(){\r\n        this.enable(this.BLEND);\r\n        this.blendFunc(this.SRC_ALPHA,this.ONE_MINUS_SRC_ALPHA);\r\n    },\r\n\r\n    /**\r\n     * Sets the size of the gl canvas\r\n     * @param width {Number} Width that the canvas should be. Defaults to entire window\r\n     * @param height { Number} Height that the canvas should be. Defaults to window.innerHeight\r\n     * @returns {RendererFormat}\r\n     */\r\n    setSize(width=window.innerWidth,height=window.innerHeight){\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Helper function to unbind currently bound textures.\r\n     */\r\n    unbindTexture(){\r\n        this.bindTexture(this.TEXTURE_2D,null);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the context to be full screen of it's containing element.\r\n     * @param {function} customResizeCallback specify an optional callback to deal with what happens when the screen re-sizes.\r\n     * @returns {WebGLRenderingContext}\r\n     */\r\n    setFullscreen(customResizeCallback=null){\r\n\r\n        let parent = this.canvas.parentElement;\r\n\r\n        this.canvas.width = window.innerWidth;\r\n        this.canvas.height = window.innerHeight;\r\n\r\n        //set the viewport size\r\n        this.setViewport();\r\n\r\n        if(customResizeCallback){\r\n            window.addEventListener(\"resize\",customResizeCallback);\r\n        }else {\r\n            window.addEventListener(\"resize\",() => {\r\n\r\n                this.canvas.width = window.innerWidth;\r\n                this.canvas.height = window.innerHeight;\r\n\r\n                this.setViewport(0,0,this.canvas.width,this.canvas.height);\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n};","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix:any = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in window);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nglMatrix.toRadian = function(a){\n    return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n    return Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nexport default glMatrix;","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE. */\n\nimport glMatrix from './common/matrix'\n\nvar SIMD = window.SIMD !== undefined ? window.SIMD : {};\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4:any = {\n    scalar: {},\n    SIMD: {}\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the html of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var SIMD = window.SIMD;\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n\n    var row0, row1, row2, row3,\n        tmp1,\n        minor0, minor1, minor2, minor3,\n        det,\n        a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12);\n\n    // Compute matrix adjugate\n    tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n    row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n    tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n    row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n    tmp1   = SIMD.Float32x4.mul(row2, row3);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor0 = SIMD.Float32x4.mul(row1, tmp1);\n    minor1 = SIMD.Float32x4.mul(row0, tmp1);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n    minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n    minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n    tmp1   = SIMD.Float32x4.mul(row1, row2);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n    minor3 = SIMD.Float32x4.mul(row0, tmp1);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n    minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n    minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n    tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n    minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n    minor2 = SIMD.Float32x4.mul(row0, tmp1);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n    minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n    minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n    tmp1   = SIMD.Float32x4.mul(row0, row1);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n    minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n    minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n    tmp1   = SIMD.Float32x4.mul(row0, row3);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n    minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n    minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n    tmp1   = SIMD.Float32x4.mul(row0, row2);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n    minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n    minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n    // Compute matrix determinant\n    det   = SIMD.Float32x4.mul(row0, minor0);\n    det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n    det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n    tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n    det   = SIMD.Float32x4.sub(\n        SIMD.Float32x4.add(tmp1, tmp1),\n        SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n    det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n    if (!det) {\n        return null;\n    }\n\n    // Compute matrix inverse\n    SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n    SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n    SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n    SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n    return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n    var a0, a1, a2, a3;\n    var row0, row1, row2, row3;\n    var tmp1;\n    var minor0, minor1, minor2, minor3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    // Transpose the source matrix.  Sort of.  Not a true transpose operation\n    tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n    row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n    tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n    row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n    tmp1   = SIMD.Float32x4.mul(row2, row3);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor0 = SIMD.Float32x4.mul(row1, tmp1);\n    minor1 = SIMD.Float32x4.mul(row0, tmp1);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n    minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n    minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n    tmp1   = SIMD.Float32x4.mul(row1, row2);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n    minor3 = SIMD.Float32x4.mul(row0, tmp1);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n    minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n    minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n    tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n    minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n    minor2 = SIMD.Float32x4.mul(row0, tmp1);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n    minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n    minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n    tmp1   = SIMD.Float32x4.mul(row0, row1);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n    minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n    minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n    tmp1   = SIMD.Float32x4.mul(row0, row3);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n    minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n    minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n    tmp1   = SIMD.Float32x4.mul(row0, row2);\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n    minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n    minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n    tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n    minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n    minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n    SIMD.Float32x4.store(out, 0,  minor0);\n    SIMD.Float32x4.store(out, 4,  minor1);\n    SIMD.Float32x4.store(out, 8,  minor2);\n    SIMD.Float32x4.store(out, 12, minor3);\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n        SIMD.Float32x4.add(\n            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n            SIMD.Float32x4.add(\n                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n        SIMD.Float32x4.add(\n            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n            SIMD.Float32x4.add(\n                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n        SIMD.Float32x4.add(\n            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n            SIMD.Float32x4.add(\n                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n        SIMD.Float32x4.add(\n            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n            SIMD.Float32x4.add(\n                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var SIMD = window.SIMD;\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var SIMD = window.SIMD;\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n        SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n        SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var SIMD = window.SIMD;\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n        SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n        SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var SIMD = window.SIMD;\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n        SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n        SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n    // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    var trace = mat[0] + mat[5] + mat[10];\n    var S = 0;\n\n    if (trace > 0) {\n        S = Math.sqrt(trace + 1.0) * 2;\n        out[3] = 0.25 * S;\n        out[0] = (mat[6] - mat[9]) / S;\n        out[1] = (mat[8] - mat[2]) / S;\n        out[2] = (mat[1] - mat[4]) / S;\n    } else if ((mat[0] > mat[5])&&(mat[0] > mat[10])) {\n        S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n        out[3] = (mat[6] - mat[9]) / S;\n        out[0] = 0.25 * S;\n        out[1] = (mat[1] + mat[4]) / S;\n        out[2] = (mat[8] + mat[2]) / S;\n    } else if (mat[5] > mat[10]) {\n        S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n        out[3] = (mat[8] - mat[2]) / S;\n        out[0] = (mat[1] + mat[4]) / S;\n        out[1] = 0.25 * S;\n        out[2] = (mat[6] + mat[9]) / S;\n    } else {\n        S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n        out[3] = (mat[1] - mat[4]) / S;\n        out[0] = (mat[8] + mat[2]) / S;\n        out[1] = (mat[6] + mat[9]) / S;\n        out[2] = 0.25 * S;\n    }\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n\n        sx = s[0],\n        sy = s[1],\n        sz = s[2],\n\n        ox = o[0],\n        oy = o[1],\n        oz = o[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n    out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n    out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n        a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n        a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n        a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n        a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n        a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n        a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7],\n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11],\n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7],\n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11],\n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n    Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n    Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n    Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n    Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n    Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n    Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n    Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nexport default mat4;","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE. */\n\nimport glMatrix from './common/matrix'\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3:any = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the html of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the html of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the html of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the html of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the html of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the html of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n    var factorTimes2 = t * t,\n        factor1 = factorTimes2 * (2 * t - 3) + 1,\n        factor2 = factorTimes2 * (t - 2) + t,\n        factor3 = factorTimes2 * (t - 1),\n        factor4 = factorTimes2 * (3 - 2 * t);\n\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n    return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n    var inverseFactor = 1 - t,\n        inverseFactorTimesTwo = inverseFactor * inverseFactor,\n        factorTimes2 = t * t,\n        factor1 = inverseFactorTimesTwo * inverseFactor,\n        factor2 = 3 * t * inverseFactorTimesTwo,\n        factor3 = 3 * factorTimes2 * inverseFactor,\n        factor4 = factorTimes2 * t;\n\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n    var p = [], r=[];\n    //Translate point to the origin\n    p[0] = a[0] - b[0];\n    p[1] = a[1] - b[1];\n    p[2] = a[2] - b[2];\n\n    //perform rotation\n    r[0] = p[0];\n    r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n    r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n    //translate to correct position\n    out[0] = r[0] + b[0];\n    out[1] = r[1] + b[1];\n    out[2] = r[2] + b[2];\n\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n    var p = [], r=[];\n    //Translate point to the origin\n    p[0] = a[0] - b[0];\n    p[1] = a[1] - b[1];\n    p[2] = a[2] - b[2];\n\n    //perform rotation\n    r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n    r[1] = p[1];\n    r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n    //translate to correct position\n    out[0] = r[0] + b[0];\n    out[1] = r[1] + b[1];\n    out[2] = r[2] + b[2];\n\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n    var p = [], r=[];\n    //Translate point to the origin\n    p[0] = a[0] - b[0];\n    p[1] = a[1] - b[1];\n    p[2] = a[2] - b[2];\n\n    //perform rotation\n    r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n    r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n    r[2] = p[2];\n\n    //translate to correct position\n    out[0] = r[0] + b[0];\n    out[1] = r[1] + b[1];\n    out[2] = r[2] + b[2];\n\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n\n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n\n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n\n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n\n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n\n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }\n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nexport default vec3;","import mat4 from '../math/mat4'\r\nimport vec3 from '../math/vec3'\r\nimport {Camera} from \"../interfaces\";\r\n\r\n/**\r\n * The basic components of a camera\r\n */\r\nexport class CameraBase implements Camera{\r\n    projectionMatrix:Array<any>;\r\n    viewMatrix:Array<any>;\r\n    near:number;\r\n    far:number;\r\n    fov:number;\r\n    aspect:number;\r\n    eye:Array<any> = vec3.create();\r\n    target:Array<any> = vec3.create();\r\n    center:Array<any> = vec3.create();\r\n    position:Array<any> = vec3.create();\r\n    up:Array<any> = vec3.create(0,1,0);\r\n    zoom:number;\r\n    constructor() {}\r\n\r\n\r\n    translate(vector:[number,number,number]){\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    cameraLookAt(eye:[number,number,number],aCenter?:[number,number,number]){\r\n        this.eye = vec3.clone(eye);\r\n        this.center = aCenter !== undefined ? vec3.clone(aCenter) : this.center;\r\n\r\n        vec3.copy(this.position,eye);\r\n        mat4.identity(this.viewMatrix);\r\n        mat4.lookAt(this.viewMatrix,eye,this.center,this.up)\r\n        return this;\r\n    }\r\n\r\n    setZoom(zoom:number){\r\n        this.zoom = zoom;\r\n        this.position = [0,0,zoom];\r\n\r\n        this.cameraLookAt([0,0,0])\r\n        mat4.translate(this.viewMatrix,this.viewMatrix,[0,0,zoom]);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * The basic definition of a PerspectiveCamera\r\n */\r\nexport class PerspectiveCamera extends CameraBase{\r\n\r\n    constructor({\r\n                    fov = Math.PI / 4,\r\n                    aspect = window.innerWidth / window.innerHeight,\r\n                    near = 0.1,\r\n                    far = 1000.0\r\n                }={}) {\r\n        super();\r\n\r\n        this.projectionMatrix = mat4.create();\r\n        this.viewMatrix = mat4.create();\r\n        this.fov = fov;\r\n        this.aspect = aspect;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n\r\n        mat4.perspective(this.projectionMatrix,fov,aspect,near,far);\r\n\r\n        return this;\r\n    }\r\n\r\n    resize(aspectRatio){\r\n        this.aspect = aspectRatio;\r\n        mat4.perspective(this.projectionMatrix,this.fov,this.aspect,this.near,this.far);\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * Basic components of an orthographic camera\r\n */\r\nexport class OrthoCamera extends CameraBase{\r\n\r\n    constructor(fov:number,aspect:number,near:number,far:number) {\r\n        super();\r\n        this.projectionMatrix = mat4.create();\r\n        this.viewMatrix = mat4.create();\r\n        this.fov = fov;\r\n        this.aspect = aspect;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        mat4.perspective(this.projectionMatrix,fov,aspect,near,far);\r\n\r\n        return this;\r\n    }\r\n\r\n}","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE. */\n\nimport glMatrix from './common/matrix'\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3:any = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the html of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n        a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n        a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n        a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n        a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nexport default mat3;","import mat4 from \"./math/mat4\";\r\nimport mat3 from \"./math/mat3\";\r\n\r\nwindow[\"jraDebug\"] = false;\r\nwindow[\"toggleDebug\"] = function(){\r\n    window[\"jraDebug\"] = !window[\"jraDebug\"];\r\n};\r\n\r\n/**\r\n * Checks to see if a value is a vector 3. Assumes vector 3 is\r\n * in an Array\r\n * @param val {Array}\r\n * @returns {boolean}\r\n */\r\nexport function isVec3(val){\r\n    if(val instanceof Array){\r\n        if(val.length === 3){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Checks the context to ensure it has the desired extension enabled\r\n * @param ctx {WebGLRenderingContext} the webgl context to check\r\n * @param extension {String} the name of the extension to look for\r\n */\r\nexport function checkExtension(ctx,extension){\r\n    if(ctx.getExtension(extension)){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a WebGL enum to a string\r\n * @param {WebGLRenderingContext} gl The WebGLContext to use.\r\n * @param {number} value The enum value.\r\n * @return {string} The enum as a string.\r\n */\r\nexport function enumToString(gl,value){\r\n    for (let p in gl) {\r\n        if (gl[p] === value) {\r\n            return p;\r\n        }\r\n    }\r\n    return \"0x\" + value.toString(16);\r\n}\r\n\r\n/**\r\n * Logs an error message when window.jraDebug is set to true. If renderImmediate\r\n * is true, the message renders regardless.\r\n * @param message {String} the message to log\r\n * @param renderImmediate {Boolean} whether or not to render the message right away.\r\n */\r\nexport function logError(message,renderImmediate=false){\r\n    let css = \"background:red;color:white; padding-left:2px; padding-right:2px;\";\r\n    if(window[\"jraDebug\"] || renderImmediate){\r\n        console.log(`%c ${message}`,css);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Logs an warning message when window.jraDebug is set to true. If renderImmediate\r\n * is true, the message renders regardless.\r\n * @param message {String} the message to log\r\n * @param renderImmediate {Boolean} whether or not to render the message right away.\r\n */\r\nexport function logWarn(message,renderImmediate){\r\n    let css = \"background:yellow;color:red; padding-left:2px; padding-right:2px;\";\r\n    if(window[\"jraDebug\"] || renderImmediate){\r\n        console.log(`%c ${message}`,css);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Logs an regular message when window.jraDebug is set to true. If renderImmediate\r\n * is true, the message renders regardless.\r\n * @param message {String} the message to log\r\n * @param renderImmediate {Boolean} whether or not to render the message right away.\r\n */\r\nexport function log(message,renderImmediate=false){\r\n    let css = \"background:#46A6B2;padding:4px; color:white;\";\r\n    if(window[\"jraDebug\"] || renderImmediate){\r\n        console.log(`%c ${message}`,css);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Validates an array to ensure that it is a suitable value for passing to GLSL.\r\n * @param array {Array} an array that you want to feed into a uniform.\r\n * @returns {boolean}\r\n */\r\nexport function validateLength(array){\r\n\r\n    let isValid = null;\r\n    switch (array.length){\r\n        case 3:\r\n            isValid = 3;\r\n            break;\r\n\r\n        case 2:\r\n            isValid = 2;\r\n            break;\r\n\r\n        case 4:\r\n            isValid = 4;\r\n            break;\r\n\r\n        case 9:\r\n            isValid = 9;\r\n            break;\r\n\r\n        case 16:\r\n            isValid = 16;\r\n            break;\r\n    }\r\n    return isValid\r\n}\r\n\r\n/**\r\n * Checks to see if a value is an integer or a floating point value\r\n * @param n {Number} a value to check\r\n * @returns {boolean}\r\n */\r\nexport function isInt(n){\r\n    return n % 1 === 0;\r\n}\r\n\r\nexport function transformDirectionByMatrix(out,v,m){\r\n    var x = v[0], y = v[1], z = v[2];\r\n    out[0] = m[0] * x + m[4] * y + m[8] * z;\r\n    out[1] = m[1] * x + m[5] * y + m[9] * z;\r\n    out[2] = m[2] * x + m[6] * y + m[10] * z;\r\n    out[3] = m[3] * x + m[7] * y + m[11] * z;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Calculates a normal matrix.\r\n * @param modelMatrix {Float32Array} A model matrix\r\n * @param viewMatrix {Float32Array} a view matrix\r\n * @returns {mat3} returns calculated normal matrix.\r\n */\r\nexport function calculateNormalMatrix(modelMatrix,viewMatrix){\r\n    let model = modelMatrix;\r\n    let normalMatrix = mat3.create();\r\n\r\n    // calculate modelView\r\n    let mv = mat4.create();\r\n    let modelView = mat4.multiply(mv,modelMatrix,viewMatrix);\r\n\r\n    // reset matrices\r\n    mat4.identity(modelView);\r\n    mat3.identity(normalMatrix);\r\n\r\n    // calculate model view matrix\r\n    mat4.multiply(modelView,model,viewMatrix);\r\n\r\n    // convert model view into mat3\r\n    mat3.fromMat4(normalMatrix,modelView);\r\n\r\n    // invert\r\n    mat3.invert(normalMatrix,normalMatrix);\r\n\r\n    // transpose\r\n    mat3.transpose(normalMatrix,normalMatrix);\r\n\r\n    return normalMatrix;\r\n\r\n}\r\n","import {TextureSpec,ShaderSpec} from \"../interfaces\";\r\nimport {logError} from \"../utils\";\r\n\r\n/**\r\n * Helps to define the basic properties of a Texture.\r\n * Used between standard textures and FBOs\r\n */\r\nexport class TextureFormat implements TextureSpec{\r\n    wrapS:number;\r\n    wrapT:number;\r\n    width:number;\r\n    height:number;\r\n    minFilter:number;\r\n    magFilter:number;\r\n    depthType:number;\r\n    data:any;\r\n    attachments:Array<any>;\r\n    target:number;\r\n    internalFormat:number;\r\n    texelType:number;\r\n    level:number;\r\n    format:number;\r\n    flipY:boolean;\r\n\r\n    // a way to help identify an FBO or texture.\r\n    name:string = \" \";\r\n\r\n    constructor(gl = null,{\r\n        data=null,\r\n        isdepth=false\r\n    }={}){\r\n        if(gl === null){\r\n            logError(\"Unable to init TextureFormat - no WebGL context\")\r\n            return;\r\n\r\n        }\r\n        this.wrapS = gl.CLAMP_TO_EDGE;\r\n        this.wrapT = gl.CLAMP_TO_EDGE;\r\n        this.width = 512;\r\n        this.height = 512;\r\n        this.minFilter = gl.NEAREST;\r\n        this.magFilter = gl.NEAREST;\r\n        this.internalFormat = gl.RGB;\r\n        this.format = gl.RGB;\r\n        this.texelType = gl.UNSIGNED_BYTE;\r\n        this.level = 0;\r\n        this.flipY = true;\r\n        this.attachments = [];\r\n        this.data = null;\r\n\r\n        if(data !== null){\r\n            this.data = data;\r\n        }\r\n        if(isdepth){\r\n\r\n        }else{\r\n            this.target = gl.TEXTURE_2D;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the width of the texture\r\n     * @param val {number} width for the texture\r\n     */\r\n    setWidth(val:number){\r\n        this.width = val;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the height of the texture\r\n     * @param val {number} the height for the texture.\r\n     */\r\n    setHeight(val:number){\r\n        this.height = val;\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets the texture target\r\n     * @param val {number} the texture target to use ie TEXTURE_2D, etc.\r\n     */\r\n    setTarget(val:number){\r\n        this.target = val;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the internal format for the texture.\r\n     * @param val {number} the webgl enum of the internal format type.\r\n     */\r\n    setInternalFormat(val:number){\r\n        this.internalFormat = val;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Toggles whether or not the texture should be flipped on the y axis.\r\n     */\r\n    toggleFlipY(){\r\n        this.flipY = !this.flipY;\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * This defines the basic attributes of a WebGLProgram\r\n */\r\nexport class ShaderFormat implements ShaderSpec {\r\n    vertex:string;\r\n    fragment:string;\r\n    uniforms:Array<any>;\r\n    attributes:Array<any>;\r\n    name:string = \"\";\r\n    version:string = \"300 es\";\r\n\r\n    // varying names for transform feedback.\r\n    varyings:Array<string> = [];\r\n\r\n    feedbackMode:number = null;\r\n\r\n    constructor(vertex=null,fragment=null) {\r\n        this.vertex = vertex !== null ? vertex : \"\";\r\n        this.fragment = fragment !== null ? fragment : \"\";\r\n        this.uniforms = [];\r\n        this.attributes = [];\r\n        return this;\r\n    }\r\n\r\n    setVaryings(outputs:Array<string>){\r\n        this.varyings = outputs;\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets the transform feedback mode\r\n     * @param mode {number} GLenum specifying the feedback mode, either gl.SEPARATE_ATTRIBS or gl.INTERLEAVED_ATTRIBS\r\n     */\r\n    setFeedbackMode(mode:number){\r\n        this.feedbackMode = mode;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the vertex source\r\n     * @param source {string} source for the vertex shader\r\n     */\r\n    vertexSource(source:string){\r\n        this.vertex = source;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the vertex source\r\n     * @param sources {Array} an array of strings that contain glsl code.\r\n     */\r\n    vertexSources(sources:Array<string>){\r\n        this.vertex = sources.join(\"\\n\");\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the fragment source\r\n     * @param source {string} source for the fragment shader.\r\n     */\r\n    fragmentSource(source:string){\r\n        this.fragment = source;\r\n        return this;\r\n    }\r\n\r\n    fragmentSources(sources:Array<string>){\r\n        this.fragment = sources.join(\"\\n\");\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a uniform that should be a part of the shader.\r\n     * @param uni\r\n     */\r\n    uniform(uni){\r\n        this.uniforms.push(uni);\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets the shader version.\r\n     * @param ver\r\n     */\r\n    setVersion(ver:string){\r\n        this.version = ver;\r\n        return this;\r\n    }\r\n}","import TypedArray = NodeJS.TypedArray;\r\nimport {TextureFormat} from \"./formats\";\r\n\r\nexport default function(gl,format:TextureFormat= new TextureFormat(gl)){\r\n\r\n\r\n    let tex = gl.createTexture();\r\n\r\n    for(let i in GLTexture.prototype){\r\n        tex[i] = GLTexture.prototype[i];\r\n    }\r\n\r\n    let t = new GLTexture(gl,format);\r\n    Object.assign(tex,t);\r\n\r\n    tex._checkData();\r\n\r\n    return tex;\r\n}\r\n\r\n/**\r\n * Base functions for extending the WebGL texture object\r\n * @param gl {WebGLRenderingContext} a WebGL Rendering Context\r\n * @param format {TextureFormat} a TextureFormat object describing the texture.\r\n * @constructor\r\n */\r\nfunction GLTexture(gl,format:TextureFormat){\r\n\r\n    this.gl = gl;\r\n    this.format = format;\r\n\r\n    if(this.format.type === undefined || this.format.type === null){\r\n        this.format.type = gl.TEXTURE_2D;\r\n    }\r\n}\r\n\r\nGLTexture.prototype = {\r\n\r\n    /**\r\n     * Checks to see if any data was set on the format and then calls the appropriate loading function.\r\n     * Generally only called on texture init.\r\n     * TODO handle non-image data\r\n     */\r\n    _checkData(){\r\n        if(this.format.data !== null && this.format.data !== undefined){\r\n            if(this.format.data instanceof Image){\r\n                this.loadImage(this.format.data);\r\n            }\r\n        }else {\r\n            // if there's no data available to load, then we instantiate the texture with null data.\r\n            this.loadBlankTexture();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Changes current active texture and binds it\r\n     * @param index {number} the texture index to bind and activate on.\r\n     */\r\n    bind(index:number=0){\r\n        let gl = this.gl;\r\n        gl.activeTexture(gl[`TEXTURE${index}`]);\r\n        gl.bindTexture(this.format.type,this);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Unbinds all currently bound textures\r\n     */\r\n    unbind(){\r\n        this.gl.bindTexture(this.format.type,null);\r\n        return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * Restructures texture so that it is treated as a depth texture.\r\n     * @param settings {TextureFormat}\r\n     */\r\n    createDepthTexture(settings?:TextureFormat){\r\n        let gl = this.gl;\r\n\r\n        gl.bindTexture(this.format.type,this);\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_MAG_FILTER,settings.magFilter);\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_MIN_FILTER,settings.minFilter);\r\n\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_WRAP_S,settings.wrapS);\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_WRAP_T,settings.wrapT);\r\n\r\n        if(gl instanceof WebGLRenderingContext){\r\n            gl.texImage2D(this.format.type,0,settings.depthType,settings.width,settings.height,0,settings.depthType,gl.UNSIGNED_SHORT,null);\r\n        }else{\r\n            gl.texImage2D(this.format.type,0,settings.depthType,settings.width,settings.height,0,gl.DEPTH_COMPONENT,gl.UNSIGNED_SHORT,null);\r\n        }\r\n\r\n        gl.bindTexture(this.format.type,null);\r\n\r\n        return this;\r\n    },\r\n\r\n    loadBlankTexture(){\r\n        this.loadData(null);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Loads some data as the texture's contents.\r\n     * @param data {TypedArray} A typed array with content for the texture.\r\n     */\r\n    loadData(data:TypedArray){\r\n        let gl = this.gl;\r\n        let options = this.format;\r\n\r\n        gl.bindTexture(this.format.type,this);\r\n\r\n        // set the image\r\n        // known to work with random floating point data\r\n        //gl.texImage2D(this.format.type,0,gl.RGBA16F,width,height,0,gl.RGBA,gl.FLOAT,data);\r\n        gl.texImage2D(\r\n            this.format.type,\r\n            0,\r\n            options.internalFormat,\r\n            options.width,\r\n            options.height,\r\n            0,\r\n            options.format,\r\n            options.texelType,\r\n            data\r\n        );\r\n\r\n        // set min and mag filters\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_MAG_FILTER,options.magFilter);\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_MIN_FILTER,options.minFilter);\r\n\r\n        //set wrapping\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_WRAP_S,options.wrapS)\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_WRAP_T,options.wrapT)\r\n\r\n        // generate mipmaps if necessary\r\n        if(options.generateMipMaps){\r\n            gl.generateMipmap(this.format.type);\r\n        }\r\n        gl.bindTexture(this.format.type,null);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Loads an image as the texture data\r\n     * @param img {Image} an Image object containing the image to load.\r\n     */\r\n    loadImage(image:HTMLImageElement){\r\n        let gl = this.gl;\r\n        let options = this.format;\r\n        this.format.width = image.width;\r\n        this.format.height = image.height;\r\n\r\n        gl.bindTexture(this.format.type,this);\r\n\r\n        // if we need to flip texture\r\n        if(this.format.flipY){\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,options.flipY);\r\n        }\r\n\r\n        // set the image\r\n        gl.texImage2D(this.format.target,this.format.level,this.format.internalFormat,image.width,image.height,0,this.format.format,this.format.texelType,image);\r\n\r\n        // set min and mag filters\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_MAG_FILTER,options.magFilter);\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_MIN_FILTER,options.minFilter)\r\n\r\n        //set wrapping\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_WRAP_S,options.wrapS)\r\n        gl.texParameteri(this.format.type,gl.TEXTURE_WRAP_T,options.wrapT)\r\n\r\n        // generate mipmaps if necessary\r\n        if(options.generateMipMaps){\r\n            gl.generateMipmap(this.format.type);\r\n        }\r\n\r\n        // ensure texture is unbound.\r\n        gl.bindTexture(this.format.type,null);\r\n\r\n        return this;\r\n    },\r\n\r\n    resize(w,h) {\r\n        let gl = this.gl;\r\n        let options = this.format;\r\n        this.format.width = w;\r\n        this.format.height = h;\r\n\r\n        this.bind();\r\n\r\n        gl.texImage2D(\r\n            this.format.type,\r\n            0,\r\n            options.internalFormat,\r\n            this.format.width,\r\n            this.format.height,\r\n            0,\r\n            options.format,\r\n            options.texelType,\r\n            this.contents\r\n        );\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\n","\r\nimport createTexture from './texture'\r\nimport {TextureFormat} from \"./formats\";\r\nimport {logError} from \"../utils\";\r\n\r\n/**\r\n * Creator function for FBOs\r\n * @param gl {WebGLRenderingContext} a WebGL context\r\n * @param format {TextureFormat} an object that implements the TextureFormat interface - this is used to\r\n * describe the various attributes of how a texture should work. This will be used to create the texture at\r\n * gl.ATTACHMENT0; any other attachments will derive from this setting as well unless a new instance of TextureFormat is\r\n * used.\r\n */\r\nexport default function (gl,format:TextureFormat = new TextureFormat(gl)){\r\n    let fbo = gl.createFramebuffer();\r\n\r\n\r\n    for(let i in Fbo.prototype){\r\n        fbo[i] = Fbo.prototype[i];\r\n    }\r\n\r\n    Object.assign(fbo,new Fbo(gl,format));\r\n\r\n    // initialize fbo\r\n    fbo.build();\r\n\r\n    return fbo;\r\n};\r\n\r\n\r\nfunction Fbo(gl,format:TextureFormat){\r\n    this.gl = gl;\r\n    this.format = format;\r\n    this.depthTexture = null;\r\n\r\n    // create default texture aka gl.ATTACHMENT0 if it doesn't already exist.\r\n    if(this.format.attachments.length < 1){\r\n        let tex = createTexture(gl,format);\r\n        this.format.attachments.push(tex);\r\n    }\r\n\r\n}\r\n\r\nFbo.prototype = {\r\n\r\n    /**\r\n     * Builds out the FBO based on the current settings\r\n     */\r\n    build(){\r\n        let gl = this.gl;\r\n        let format = this.format;\r\n\r\n        this.bind();\r\n\r\n        // bind default texture\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, format.attachments[0], 0);\r\n\r\n        // if there are other attachments, apply them onto the fbo.\r\n        if(format.attachments.length > 1){\r\n            format.attachments.forEach((attachment,index) => {\r\n                let slot = gl.COLOR_ATTACHMENT0 + (index + 1);\r\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,slot, gl.TEXTURE_2D, attachment, 0);\r\n            })\r\n        }\r\n\r\n        // build depth texture.\r\n\r\n        // last check of FBO status before un-bind\r\n        let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n        this._throwError(status);\r\n\r\n        this.unbind();\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the default Framebuffer texture.\r\n     */\r\n    getColorTexture(){\r\n        return this.format.attachments[0];\r\n\r\n    },\r\n\r\n    bind(){\r\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this);\r\n        return this;\r\n    },\r\n\r\n    unbind(){\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Allows you to clear the framebuffer's texture to get rid of junk.\r\n     * @param r\r\n     * @param g\r\n     * @param b\r\n     * @param a\r\n     */\r\n    clear(r:number=0,g:number=0,b:number=0,a:number=0){\r\n        this.bind();\r\n        this.gl.clearColor(r,g,b,a);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n\r\n        this.unbind();\r\n        return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * Resizes a texture to match the given dimensions\r\n     * @param w {number} the new width to set the texture\r\n     * @param h {number} the new height to set the texture.\r\n     * @param attachmetnIndex {number} the index of the attachment you want to resize. By default this will resize the default\r\n     * attachment.\r\n     */\r\n    resize(w:number,h:number, attachmetnIndex=0){\r\n\r\n        if(attachmetnIndex > this.format.attachments.length){\r\n            logError(`Attempt to resize FBO ${this.format.name} failed - selected an index greater than the number of attachments on this FBO`);\r\n            return;\r\n        }\r\n\r\n        let gl = this.gl;\r\n        this.format.width = w;\r\n        this.format.height = h;\r\n        this.format.attachments[attachmetnIndex].resize(w,h);\r\n\r\n        //TODO heard its cheaper to rebuild fbo vs re-attach texture , not sure which is true\r\n        this.build();\r\n\r\n        return this;\r\n\r\n    },\r\n\r\n    /**\r\n     * Adds a new texture attachment to the FBO\r\n     * @param format {TextureFormat} an optional format describing the paramters for the texture\r\n     * @param index {number}\r\n     */\r\n    addAttachment(format?:TextureFormat,index?:number){\r\n\r\n        // if a new format is passed in - use that, otherwise use whatever the default attachment was created with.\r\n        let texFormat = format !== undefined ? format : this.format;\r\n        let tex = createTexture(this.gl,texFormat);\r\n        let gl = this.gl;\r\n\r\n        this.bind();\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);\r\n        this.unbind();\r\n\r\n        this.format.attachments.push(tex);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Replaces the texture at the specified attachment\r\n     * @param tex {WebGLTexture} the new webgl texture to use for replacement.\r\n     * @param index {number} the attachment on the FBO to replace.\r\n     */\r\n    replaceTexture(tex:WebGLTexture,index:number=0){\r\n        let gl = this.gl;\r\n        this.bind();\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + index, gl.TEXTURE_2D, tex, 0);\r\n        this.unbind();\r\n\r\n        return this;\r\n\r\n    },\r\n\r\n    _throwError(status){\r\n        let gl = this.gl;\r\n        switch(status){\r\n            case gl.FRAMEBUFFER_UNSUPPORTED:\r\n                throw new Error(`FBO ${this.format.name}: Framebuffer unsupported`)\r\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\r\n                throw new Error(`FBO ${this.format.name}: Framebuffer incomplete attachment`)\r\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                throw new Error(`FBO ${this.format.name}: Framebuffer incomplete dimensions`)\r\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\r\n                throw new Error(`FBO ${this.format.name}: Framebuffer incomplete missing attachment`)\r\n\r\n            case gl.FRAMEBUFFER_COMPLETE:\r\n                return true;\r\n            default:\r\n                console.error(\"unknown error creating framebuffer\")\r\n                return false;\r\n        }\r\n    }\r\n};","import TypedArray = NodeJS.TypedArray;\r\n\r\n\r\n/**\r\n * Constructor function\r\n * @param gl {WebGLRenderingContext} A webgl context\r\n * @param data {Array} optional array of information\r\n * @param indexed {boolean} whether or not the function needs to create an IndexedVbo\r\n */\r\nexport default function(gl,indexed:boolean = false, data?:ArrayBufferView){\r\n\r\n    let vbo = gl.createBuffer();\r\n\r\n    if(indexed){\r\n        for(let i in IndexVbo.prototype){\r\n            vbo[i] = IndexVbo.prototype[i];\r\n        }\r\n        Object.assign(vbo,new IndexVbo(gl));\r\n\r\n    }else{\r\n        for(let i in Vbo.prototype){\r\n            vbo[i] = Vbo.prototype[i];\r\n        }\r\n\r\n        Object.assign(vbo,new Vbo(gl));\r\n    }\r\n\r\n    if(data !== undefined){\r\n        vbo.bufferData(data);\r\n    }\r\n\r\n    return vbo;\r\n};\r\n\r\n\r\n/**\r\n * Functional definition for a regular VBO buffer\r\n * @param gl {WebGLRenderingContext} a WebGL context\r\n * @constructor\r\n */\r\nfunction Vbo (gl){\r\n    this.gl = gl;\r\n}\r\n\r\nVbo.prototype = {\r\n\r\n    /**\r\n     * Binds this buffer\r\n     */\r\n    bind(){\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this);\r\n    },\r\n\r\n    /**\r\n     * Unbinds previously bound buffer\r\n     */\r\n    unbind(){\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);\r\n    },\r\n\r\n    /**\r\n     * Buffers data onto a VBO\r\n     * @param target {number} GLenum constant of target time\r\n     * @param data {TypedArray} a TypedArray of information to load into the buffer\r\n     * @param usage {number} GLenum indicating how the data will get used.\r\n     */\r\n    bufferData(\r\n        data:ArrayBufferView,\r\n        usage:number = this.gl.STATIC_DRAW\r\n    ){\r\n        this.bind();\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER,data,usage);\r\n        this.unbind();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates the buffer (by running bufferSubData)\r\n     * @param data {TypedArray} TypedArray of data to update.\r\n     * @param offset {number} offset value to use when setting data.\r\n     */\r\n    updateBuffer(data:ArrayBufferView,offset = 0){\r\n        this.gl.bufferSubData(this.gl.ARRAY_BUFFER,offset,data);\r\n        return this;\r\n    }\r\n};\r\n\r\n/**\r\n * Functional definition for an indexed VBO\r\n * @param gl {WebGLRenderingContext} a WebGLRendering Context\r\n * @constructor\r\n */\r\nfunction IndexVbo(gl){\r\n    this.gl = gl;\r\n}\r\n\r\nIndexVbo.prototype = {\r\n    /**\r\n     * Binds this buffer\r\n     */\r\n    bind(){\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this);\r\n    },\r\n\r\n    /**\r\n     * Unbinds previously bound buffer\r\n     */\r\n    unbind(){\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null);\r\n    },\r\n\r\n    /**\r\n     * Buffers data onto a VBO\r\n     * @param target {number} GLenum constant of target time\r\n     * @param data {TypedArray} a TypedArray of information to load into the buffer\r\n     * @param usage {number} GLenum indicating how the data will get used.\r\n     */\r\n    bufferData(\r\n        data:ArrayBufferView,\r\n        usage:number = this.gl.STATIC_DRAW\r\n    ){\r\n        this.bind();\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,data,usage);\r\n        this.unbind();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates the buffer (by running bufferSubData)\r\n     * @param data {TypedArray} TypedArray of data to update.\r\n     * @param offset {number} offset value to use when setting data.\r\n     */\r\n    updateBuffer(data:ArrayBufferView,offset = 0){\r\n        this.gl.bufferSubData(this.gl.ELEMENT_ARRAY_BUFFER,offset,data);\r\n        return this;\r\n    }\r\n};","\r\n\r\nexport default function(gl){\r\n    let vao = gl.createVertexArray();\r\n\r\n    for(let i in Vao.prototype){\r\n        vao[i] = Vao.prototype[i];\r\n    }\r\n    Object.assign(vao,new Vao(gl));\r\n\r\n    return vao;\r\n};\r\n\r\n\r\nfunction Vao(gl){\r\n    this.gl = gl;\r\n}\r\n\r\nVao.prototype = {\r\n\r\n    bind(){\r\n        this.gl.bindVertexArray(this);\r\n    },\r\n\r\n    unbind(){\r\n        this.gl.bindVertexArray(null);\r\n    },\r\n\r\n    /**\r\n     * Turns the attribute instanced.\r\n     * @param attribute {number} the attribute location that should be instanced.\r\n     * @param divisor {number} A GLuint specifying the number of instances that will pass between updates of the generic attribute. Usually 1 is more than enough.\r\n     */\r\n    makeInstancedAttribute(attribute:number,divisor:number=1){\r\n        let gl = this.gl;\r\n        gl.vertexAttribDivisor(attribute,divisor);\r\n        return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * Enables an attribute on the Vao\r\n     * @param idx {number} a index value. Should not exceed the number of vertex attributes supported\r\n     * by your graphics card.\r\n     * TODO maybe add a check to insure index is less than max\r\n     */\r\n    enableAttrib(idx=0){\r\n        this.gl.enableVertexAttribArray(idx);\r\n        return this;\r\n    },\r\n    disableAttrib(idx=0){\r\n        this.gl.disableVertexAttribArray(idx);\r\n        return this;\r\n    },\r\n    enable(idx=0){\r\n        this.enableAttrib(idx);\r\n        return this;\r\n    },\r\n\r\n    disable(idx){\r\n        this.disableAttrib(idx);\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Associates the contents of a Vbo with a vertex attribute\r\n     * @param index {number} the index of the vertex attribute to assign data to.\r\n     * @param size {number} A GLint specifying the number of components per vertex attribute. Must be 1, 2, 3, or 4. ie positions have a size of 3 for x,y,z\r\n     * @param type {number} GLenum of the type of data the Vbo contains\r\n     * @param normalized {number} A GLboolean specifying whether integer data values should be normalized into a certain range when being casted to a float.\r\n     * @param stride {number} A GLsizei specifying the offset in bytes between the beginning of consecutive vertex attributes. Cannot be larger than 255. If stride is 0, the attribute is assumed to be tightly packed, that is, the attributes are not interleaved but each attribute is in a separate block, and the next vertex' attribute follows immediately after the current vertex.\r\n     * @param offset {number} A GLintptr specifying an offset in bytes of the first component in the vertex attribute array. Must be a multiple of the byte length of type.\r\n     */\r\n    assignData(\r\n        index:number = 0,\r\n        size:number = 3,\r\n        type:number = this.gl.FLOAT,\r\n        normalized:GLboolean = this.gl.FALSE,\r\n        stride:number = 0,\r\n        offset:number = 0\r\n\r\n    ){\r\n\r\n        this.gl.vertexAttribPointer(index,size,type,normalized,stride,offset);\r\n        return this;\r\n    }\r\n};\r\n","import vbo from '../core/vbo'\r\nimport vao from '../core/vao'\r\nimport {Geometry} from '../interfaces'\r\nimport mat4 from '../math/mat4'\r\n\r\n\r\n/**\r\n * Basic framework for rendering a 3D mesh.\r\n */\r\nexport default class Mesh {\r\n    gl:any;\r\n    vao:any;\r\n    attributes:any;\r\n    attribData:Array<any>;\r\n    shader:any;\r\n    primMode:number;\r\n\r\n    // when instancing, this decribes the number of items to draw.\r\n    numItems:number;\r\n\r\n    // if using a framebuffer, stores framebuffer.\r\n    framebuffer:any = null;\r\n\r\n    // number of vertices to render\r\n    numVertices:number;\r\n\r\n    // whether or not the mesh is an indexed mesh.\r\n    isIndexed:boolean = false;\r\n    indexVbo:any;\r\n\r\n    // whether or not the mesh is an instanced mesh.\r\n    isInstanced:boolean = false;\r\n\r\n    modelMatrix:Array<number> = mat4.create();\r\n\r\n\r\n    constructor(shader,geometry?:Geometry) {\r\n        let gl = shader.gl;\r\n        this.gl = shader.gl;\r\n        this.shader = shader;\r\n        this.vao = vao(gl);\r\n        this.attributes = shader.attributes;\r\n        this.attribData = [];\r\n        this.numVertices = 0;\r\n\r\n        this.primMode = gl.TRIANGLES;\r\n        // TODO if geometry is not undefined, process it's vertices, etc..\r\n        if(geometry !== undefined){\r\n            this._processGeometry(geometry);\r\n        }\r\n    }\r\n\r\n    setPrimitiveMode(mode:number){\r\n        this.primMode = mode;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translate the mesh.\r\n     * @param pos {Array} a 3 component array representing a translation vector\r\n     */\r\n    translate(pos:[number,number,number]){\r\n        this.modelMatrix[12] = pos[0];\r\n        this.modelMatrix[13] = pos[1];\r\n        this.modelMatrix[14] = pos[2];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the model matrix in an additive manner.\r\n     * @param pos {Array} a 3 component array representing a translation vector\r\n     */\r\n    additiveTranslate(pos:[number,number,number]){\r\n        mat4.translate(this.modelMatrix,this.modelMatrix,pos);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Draws the mesh\r\n     * @param camera {Camera} an object that contains the keys \"projectionMatrix\" and \"viewMatrix\"\r\n     */\r\n    draw(camera){\r\n        let gl = this.gl;\r\n\r\n        if(this.framebuffer){\r\n            this.framebuffer.bind();\r\n        }\r\n\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n\r\n        if(camera){\r\n            this.shader.uniform(\"projectionMatrix\",camera.projectionMatrix);\r\n            this.shader.uniform(\"viewMatrix\",camera.viewMatrix);\r\n            this.shader.uniform(\"modelMatrix\",this.modelMatrix);\r\n\r\n        }\r\n\r\n        this._enableAttributes();\r\n\r\n        // TODO handle indexed data + instanced data.\r\n\r\n        if(this.isInstanced){\r\n\r\n            if(this.isIndexed){\r\n                this.indexVbo.bind();\r\n                gl.drawElementsInstanced(this.primMode,this.numVertices, gl.UNSIGNED_SHORT,0,this.numItems);\r\n                this.indexVbo.unbind();\r\n            }else{\r\n                gl.drawArraysInstanced(this.primMode,0,this.numVertices,this.numItems);\r\n            }\r\n        }else{\r\n            if(this.isIndexed){\r\n\r\n                this.indexVbo.bind();\r\n                gl.drawElements(this.primMode,this.numVertices,gl.UNSIGNED_SHORT,0);\r\n                this.indexVbo.unbind();\r\n            }else{\r\n\r\n                gl.drawArrays(this.primMode,0,this.numVertices);\r\n            }\r\n        }\r\n\r\n        this._disableAttributes();\r\n        this.vao.unbind();\r\n\r\n        if(this.framebuffer){\r\n            this.framebuffer.unbind();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a uniform value on the mesh. Note that this runs the general shader uniform function so it may or may not work\r\n     * depending on the value that you would like to send.\r\n     * @param name {string} the name of the uniform.\r\n     * @param value {*} the value for the uniform\r\n     */\r\n    uniform(name,value){\r\n        this.shader.uniform(name,value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Processes a geometry object.\r\n     * @param geo {Geometry} a Geometry object\r\n     * @private\r\n     */\r\n    _processGeometry(geo:Geometry){\r\n\r\n        // add positions because we at least know that should exist.\r\n        this.addAttribute('position',geo.vertices);\r\n\r\n        // add uvs\r\n        if(geo.uvs.length > 0){\r\n            this.addAttribute('uv',geo.uvs,{\r\n                size:2\r\n            });\r\n        }\r\n\r\n        // add indices\r\n        if(geo.indices.length > 0){\r\n            this.addIndexBuffer(geo.indices);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Enables all attributes for the the mesh.\r\n     * @private\r\n     */\r\n    _enableAttributes(){\r\n        for(let i in this.attributes){\r\n            let attrib = this.attributes[i];\r\n            this.vao.enable(attrib.location);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disables all attributes for the mesh.\r\n     * @private\r\n     */\r\n    _disableAttributes(){\r\n        for(let i in this.attributes){\r\n            let attrib = this.attributes[i];\r\n            this.vao.disable(attrib.location);\r\n        }\r\n    }\r\n\r\n    scale(scale:[number,number,number]){\r\n        this.modelMatrix = mat4.scale(this.modelMatrix,this.modelMatrix,scale);\r\n\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets an fbo for the mesh  - if set, mesh will draw onto FBO instead of\r\n     * rendering to screen.\r\n     * @param fbo\r\n     */\r\n    setFbo(fbo:WebGLFramebuffer){\r\n        this.framebuffer = fbo;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * When rendering onto a framebuffer, this will return the Texture associated with\r\n     * COLOR_ATTACHMENT0.\r\n     *\r\n     * If not rendering with a framebuffer, will just return the mesh object\r\n     */\r\n    getRenderedMesh(){\r\n        if(this.framebuffer){\r\n            return this.framebuffer.getColorTexture();\r\n        }else {\r\n            console.warn(\"Mesh::getRenderedMesh called with no FBO assigned. Returning mesh object\");\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds an indices to a mesh\r\n     * @param data {Array} array of indices to utilize.\r\n     */\r\n    addIndexBuffer(data:Array<any>){\r\n        let gl = this.gl;\r\n        this.vao.bind();\r\n\r\n        let arr = new Uint16Array(data);\r\n        this.indexVbo = vbo(gl,true,arr);\r\n\r\n        this.vao.unbind();\r\n        this.isIndexed = true;\r\n        this.numVertices = data.length;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds an instanced attribute\r\n     * @param name {string} name for the attribute\r\n     * @param data {Array} data to populate attribute buffer\r\n     * @param size {number} the size of each component of the attribute ie 3d position would be 3\r\n     * @param divisor {number} number of instances that will get run during update. Usually 1 is fine\r\n     * @param normalized {number} whether or not the data is normalized.\r\n     * @param format {number} GLenum of what type of data the attribute contains - ie gl.FLOAT\r\n     * @param stride\r\n     * @param offset\r\n     */\r\n    addInstancedAttribute(name:string,data:Array<any>,{\r\n        size=3,\r\n        divisor=1,\r\n        normalized=this.gl.FALSE,\r\n        format=this.gl.FLOAT,\r\n        stride=0,\r\n        offset=0\r\n    }={}){\r\n\r\n        this.addAttribute(name,data,{\r\n            size:size,\r\n            normalized:normalized,\r\n            format:format,\r\n            stride:stride,\r\n            offset:offset\r\n        });\r\n\r\n        let attrib = this.attributes[name];\r\n        this.vao.bind();\r\n\r\n        attrib.buffer.bind();\r\n        this.vao.makeInstancedAttribute(attrib.location,divisor);\r\n        attrib.buffer.unbind();\r\n        this.vao.unbind();\r\n\r\n        this.isInstanced = true;\r\n\r\n    }\r\n\r\n    /**\r\n     * Adds an attribute to the mesh via a buffer instead of an array.\r\n     * @param name {string} name of the attribute in the shader\r\n     * @param buffer {WebGLBuffer} a WebGL buffer of pre-loaded data.\r\n     * @param size {number} the size of each component per vertex\r\n     * @param normalized {boolean} whether or not the data is normalized\r\n     * @param format {number} GLenum indicating the type of information for the attribute.\r\n     */\r\n    addAttributeBuffer(name:string,buffer:any,{\r\n        size=3,\r\n        normalized=this.gl.FALSE,\r\n        format=this.gl.FLOAT,\r\n        stride=0,\r\n        offset=0\r\n    }={}) {\r\n\r\n        this.vao.bind();\r\n        buffer.bind();\r\n\r\n        // check to see if we already have an attribute for the data\r\n        if(this.attributes.hasOwnProperty(name)){\r\n            let attrib  = this.attributes[name];\r\n            this.vao.enable(attrib.location);\r\n            this.vao.assignData(attrib.location,size,format,normalized,stride,offset);\r\n            attrib[\"data\"] = null;\r\n            attrib[\"buffer\"] = buffer;\r\n            this.vao.disable(attrib.location);\r\n            this.attribData.push(attrib);\r\n        }else{\r\n            // create a new attribute and assign it a location\r\n            let loc = this.attribData.length;\r\n            let attrib = {\r\n                location:loc,\r\n                name:name,\r\n                data:null,\r\n                buffer:buffer\r\n            }\r\n            this.gl.bindAttribLocation(this.shader,attrib.location,name);\r\n            this.vao.enable(loc);\r\n            this.vao.assignData(loc,size,format,normalized,stride,offset);\r\n            this.vao.disable(attrib.location);\r\n            this.attribData.push(attrib);\r\n        }\r\n        buffer.unbind();\r\n        this.vao.unbind();\r\n\r\n    }\r\n\r\n    /**\r\n     * Adds an instanced attribute to the mesh via a buffer instead of an array.\r\n     * @param name {string} name of the attribute in the shader\r\n     * @param buffer {WebGLBuffer} a WebGL buffer of pre-loaded data.\r\n     * @param size {number} the size of each component per vertex\r\n     * @param normalized {boolean} whether or not the data is normalized\r\n     * @param format {number} GLenum indicating the type of information for the attribute.\r\n     */\r\n    addInstancedAttributeBuffer(name:string,buffer:any,{\r\n        size=3,\r\n        normalized=this.gl.FALSE,\r\n        format=this.gl.FLOAT,\r\n        stride=0,\r\n        offset=0,\r\n        divisor=1,\r\n        numItems=100\r\n    }={}) {\r\n\r\n        this.vao.bind();\r\n        buffer.bind();\r\n\r\n        // check to see if we already have an attribute for the data\r\n        if(this.attributes.hasOwnProperty(name)){\r\n            let attrib  = this.attributes[name];\r\n            this.vao.enable(attrib.location);\r\n            this.vao.assignData(attrib.location,size,format,normalized,stride,offset);\r\n            attrib[\"data\"] = null;\r\n            attrib[\"buffer\"] = buffer;\r\n            this.vao.makeInstancedAttribute(attrib.location,divisor);\r\n            this.vao.disable(attrib.location);\r\n            this.attribData.push(attrib);\r\n        }else{\r\n            // create a new attribute and assign it a location\r\n            let loc = this.attribData.length;\r\n            let attrib = {\r\n                location:loc,\r\n                name:name,\r\n                data:null,\r\n                buffer:buffer\r\n            }\r\n            this.gl.bindAttribLocation(this.shader,attrib.location,name);\r\n            this.vao.enable(loc);\r\n            this.vao.assignData(loc,size,format,normalized,stride,offset);\r\n            this.vao.makeInstancedAttribute(loc,divisor);\r\n            this.vao.disable(attrib.location);\r\n            this.attribData.push(attrib);\r\n        }\r\n        buffer.unbind();\r\n        this.vao.unbind();\r\n\r\n\r\n        this.isInstanced = true;\r\n        this.numItems = numItems;\r\n        return this;\r\n\r\n    }\r\n    /**\r\n     * Add an attribute to the mesh\r\n     * @param name {string} name of the attribute in the shader\r\n     * @param data {Array} data array of attribute info\r\n     * @param size {number} the size of each component per vertex\r\n     * @param normalized {boolean} whether or not the data is normalized\r\n     * @param format {number} GLenum indicating the type of information for the attribute.\r\n     */\r\n    addAttribute(name:string,data:Array<any>,{\r\n        size=3,\r\n        normalized=this.gl.FALSE,\r\n        format=this.gl.FLOAT,\r\n        stride=0,\r\n        offset=0\r\n    }={}){\r\n\r\n        let arr = null;\r\n\r\n        // determing the type of TypedArray to use.\r\n        // TODO could use more work for specifics\r\n        if(format == this.gl.FLOAT){\r\n            arr = new Float32Array(data);\r\n        }else{\r\n            arr = new Uint16Array(data);\r\n        }\r\n\r\n        // bind vao and build buffer for attribute\r\n        this.vao.bind();\r\n        let buffer = vbo(this.gl,false,arr);\r\n\r\n\r\n        buffer.bind();\r\n\r\n        // check to see if we already have an attribute for the data\r\n        if(this.attributes.hasOwnProperty(name)){\r\n            let attrib  = this.attributes[name];\r\n            this.vao.enable(attrib.location);\r\n            this.vao.assignData(attrib.location,size,format,normalized,stride,offset);\r\n            attrib[\"data\"] = arr;\r\n            attrib[\"buffer\"] = buffer;\r\n            this.vao.disable(attrib.location);\r\n            this.attribData.push(attrib);\r\n        }else{\r\n            // create a new attribute and assign it a location\r\n            let loc = this.attribData.length;\r\n            let attrib = {\r\n                location:loc,\r\n                name:name,\r\n                data:data,\r\n                buffer:buffer\r\n            }\r\n            this.gl.bindAttribLocation(this.shader,attrib.location,name);\r\n            this.vao.enable(loc);\r\n            this.vao.assignData(loc,size,format,normalized,stride,offset);\r\n            this.vao.disable(attrib.location);\r\n            this.attribData.push(attrib);\r\n        }\r\n\r\n\r\n        // figure out the number of vertices to use when drawing.\r\n        if(name === \"position\" || name === \"Position\"){\r\n            this.numVertices = data.length / size;\r\n        }\r\n\r\n        buffer.unbind();\r\n        this.vao.unbind();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the numItems property of the mesh. Used when drawings an instance mesh.\r\n     * @param itms{number} the number of instances to draw\r\n     */\r\n    setNumItems(itms:number=1){\r\n        this.numItems = itms;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Allows you to set the number of vertices manually.\r\n     */\r\n    setNumVertices(num:number){\r\n\r\n        this.numVertices = num;\r\n        return this;\r\n    }\r\n\r\n    // returns data associated with an attribute.\r\n    getAttributeData(name:string){\r\n\r\n    }\r\n\r\n}","import {Geometry} from \"../interfaces\";\r\n\r\n/**\r\n * Based off of @vorg's primitive-plane package.\r\n * Mostly the same but with some minor modifications.\r\n * https://github.com/vorg/primitive-plane\r\n */\r\nexport default class Plane implements Geometry{\r\n    vertices:Array<any> = [];\r\n    normals:Array<any> = [];\r\n    indices:Array<any> = [];\r\n    uvs:Array<any> = [];\r\n    constructor(sx=1,sy=1,nx=1,ny=1,options?){\r\n        let quads = (options && options.quads) ? options.quads : false\r\n        let resolution = (options && options.resolution) ? options.resolution : 1\r\n\r\n\r\n        for (let iy = 0; iy <= ny; iy++) {\r\n            for (let ix = 0; ix <= nx; ix++) {\r\n                let u = ix / nx\r\n                let v = iy / ny\r\n\r\n                let x = -sx / 2 + u * sx // starts on the left\r\n                let y = sy / 2 - v * sy // starts at the top\r\n                let z = (ix * resolution);\r\n\r\n\r\n                this.vertices.push(x, y, 0)\r\n                this.uvs.push(u, 1.0 - v)\r\n                this.normals.push(0, 0, 1)\r\n\r\n                if (iy < ny && ix < nx) {\r\n                    if (quads) {\r\n                        this.indices.push([iy * (nx + 1) + ix, (iy + 1) * (nx + 1) + ix, (iy + 1) * (nx + 1) + ix + 1, iy * (nx + 1) + ix + 1])\r\n                    } else {\r\n                        this.indices.push([iy * (nx + 1) + ix, (iy + 1) * (nx + 1) + ix + 1, iy * (nx + 1) + ix + 1])\r\n                        this.indices.push([(iy + 1) * (nx + 1) + ix + 1, iy * (nx + 1) + ix, (iy + 1) * (nx + 1) + ix])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // unroll indices\r\n        let idx = [];\r\n        this.indices.forEach(set => {\r\n            set.forEach(itm => {\r\n                idx.push(itm);\r\n            })\r\n        })\r\n\r\n        this.indices = idx;\r\n    }\r\n}","import {ShaderSpec} from '../interfaces'\r\nimport {log,logError} from '../utils'\r\n\r\n/**\r\n * Default function for creating a GLSL shader\r\n * @param gl {WebGLRenderingContext} a webgl context\r\n * @param spec {ShaderSpec} a object implementing ShaderSpec interface describing shader settings.\r\n */\r\nexport default function(gl,spec:ShaderSpec){\r\n\r\n    if(spec === undefined){\r\n        return;\r\n    }\r\n\r\n    let shader = gl.createProgram();\r\n\r\n    for(let i in Shader.prototype){\r\n        shader[i] = Shader.prototype[i];\r\n    }\r\n\r\n\r\n    let glsl = new Shader(gl,spec);\r\n    Object.assign(shader,glsl);\r\n\r\n    shader.loadShader();\r\n\r\n    return shader;\r\n\r\n}\r\n\r\n/**\r\n * The class to augment the WebGLProgram\r\n * @param gl\r\n * @param spec\r\n * @constructor\r\n */\r\nfunction Shader(gl,spec:ShaderSpec){\r\n\r\n    this.gl = gl;\r\n    this.uniforms = spec.uniforms !== undefined ? spec.uniforms : {};\r\n    this.attributes = spec.attributes !== undefined ? spec.attributes : {};\r\n    this.version = `#version ${spec.version} \\n`;\r\n    this.precision = \"highp float\";\r\n    this.spec = spec;\r\n    this.name = spec.name;\r\n}\r\n\r\nShader.prototype = {\r\n\r\n    /**\r\n     * Loads a shader\r\n     * @param vertex {string} source for the vertex shader\r\n     * @param fragment {string} source for the fragment shader.\r\n     */\r\n    loadShader(vertex:string=this.spec.vertex,fragment:string = this.spec.fragment){\r\n        let gl = this.gl;\r\n\r\n        vertex = this.version + vertex;\r\n        fragment = this.version + fragment;\r\n\r\n\r\n        let vShader = this._compileShader(gl.VERTEX_SHADER,vertex);\r\n        let fShader = this._compileShader(gl.FRAGMENT_SHADER,fragment);\r\n\r\n        // attach shaders\r\n        gl.attachShader(this,vShader);\r\n        gl.attachShader(this,fShader);\r\n\r\n        // if transform feedback is being used, we need to parse varyings before linking program.\r\n        this._parseTransformFeedback();\r\n\r\n        // link program\r\n        gl.linkProgram(this);\r\n\r\n        gl.deleteShader(vShader);\r\n        gl.deleteShader(fShader);\r\n\r\n        if(!gl.getProgramParameter(this,gl.LINK_STATUS)){\r\n            logError(`Could not initialize WebGLProgram ${this.name}`);\r\n            throw (\"Couldn't link shader program - \" + gl.getProgramInfoLog(this));\r\n        }else{\r\n\r\n            // if debugging is on\r\n            if(window[\"jraDebug\"]){\r\n                if(this.name !== \"\"){\r\n                    log(`Shader \"${this.name}\" compiled successfully`);\r\n                }else{\r\n                    log(`Shader compiled successfully`);\r\n                }\r\n            }\r\n\r\n            this._parseActiveAttributes();\r\n            this._parseActiveUniforms();\r\n            return this;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Binds the shader\r\n     */\r\n    bind(){\r\n        this.gl.useProgram(this);\r\n    },\r\n\r\n    /**\r\n     * Deletes ahders\r\n     */\r\n    delete(){\r\n        this.gl.deleteProgram(this);\r\n    },\r\n\r\n    /**\r\n     * Looks through shader and parses the attribute data of any currently in-use\r\n     * uniform values\r\n     */\r\n    _parseActiveUniforms(){\r\n        let gl = this.gl;\r\n\r\n        // set uniforms and their locations (plus default values if specified)\r\n        let numUniforms = gl.getProgramParameter(this,gl.ACTIVE_UNIFORMS);\r\n\r\n        // first loop through and save all active uniforms.\r\n        for(let i = 0; i < numUniforms; ++i){\r\n            let info = gl.getActiveUniform(this,i);\r\n            let location = gl.getUniformLocation(this,info.name);\r\n            this.uniforms[info.name] = {\r\n                location:location,\r\n                name:info.name\r\n            };\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Helps set up transform feedback when the varyings array and feedback mode are set.\r\n     * @private\r\n     */\r\n    _parseTransformFeedback(){\r\n        if(this.spec.varyings.length > 0 && this.spec.feedbackMode !== null){\r\n            this.setVaryings(this.spec.varyings,this.spec.feedbackMode);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Looks through shader and parses the attribute data of any currently in-use\r\n     * attribute values\r\n     */\r\n    _parseActiveAttributes(){\r\n        let gl = this.gl;\r\n\r\n        let attribs = gl.getProgramParameter(this, gl.ACTIVE_ATTRIBUTES);\r\n\r\n\r\n        for(let i = 0; i < attribs; ++i){\r\n            let attrib = gl.getActiveAttrib(this,i);\r\n            let loc = gl.getAttribLocation(this,attrib.name) ;\r\n\r\n            if(loc !== null){\r\n                this.attributes[attrib.name] = {\r\n                    size:attrib.size,\r\n                    name:attrib.name,\r\n                    type:attrib.type,\r\n                    location:loc\r\n                };\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Compiles a shader.\r\n     * @param type\r\n     * @param source\r\n     * @returns {*}\r\n     */\r\n    _compileShader(type,source){\r\n        let gl = this.gl;\r\n        let shader = gl.createShader(type);\r\n        let shaderTypeName = \"\"\r\n\r\n        // get the string name of the type of shader we're trying to compile.\r\n        if(type === gl.FRAGMENT_SHADER){\r\n            shaderTypeName = \"FRAGMENT\"\r\n        }else{\r\n            shaderTypeName = \"VERTEX\";\r\n        }\r\n\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n\r\n            if(this.name){\r\n                logError(`Error in ${shaderTypeName} shader compilation with \"${this.name}\" - ` + gl.getShaderInfoLog(shader) + `\\n source was :\\n ${source}`,true);\r\n            }else {\r\n                logError(`Error in ${shaderTypeName} shader compilation with ${this.name} - ` + gl.getShaderInfoLog(shader), true);\r\n                console.log(source)\r\n            }\r\n\r\n            // just halt execution if we run into an error.\r\n            throw new Error(\"Shader error - see message\");\r\n\r\n        } else {\r\n            return shader;\r\n        }\r\n    },\r\n\r\n    setVaryings(varyings:Array<string>,mode:number){\r\n        this.gl.transformFeedbackVaryings(this,varyings,mode);\r\n    },\r\n\r\n    // ============= HANDLE UNIFORMS ================= //\r\n\r\n    /**\r\n     * A general catch-all for calling the correct uniform function\r\n     * @param name {string} name of the uniform\r\n     * @param value {*} value to send to the uniform .\r\n     */\r\n    uniform(name,value){\r\n\r\n        if(value instanceof Array || Object.prototype.toString.call(value.buffer) === \"[object ArrayBuffer]\"){\r\n\r\n\r\n            switch(value.length){\r\n                case 2:\r\n                    this.vec2(name,value);\r\n                    break;\r\n                case 3:\r\n                    this.vec3(name,value);\r\n                    break;\r\n                case 9:\r\n                    this.mat3(name,value);\r\n                    break;\r\n                case 16:\r\n                    this.mat4(name,value);\r\n                    break;\r\n            }\r\n        }else {\r\n\r\n            if(value.toString().search(\"\\.\")){\r\n                this.float(name,value);\r\n            }else{\r\n                this.int(name,value);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a vec2 uniform on the shader.\r\n     * @param name {string} the name of the uniform\r\n     * @param value {Array} a 2 component array\r\n     */\r\n    vec2(name:string,value:[number,number]){\r\n        if(this.uniforms[name] !== undefined){\r\n            this.gl.uniform2fv(this.uniforms[name].location,value);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a vec3 uniform on the shader.\r\n     * @param name {string} the name of the uniform\r\n     * @param value {Array} a 3 component array\r\n     */\r\n    vec3(name:string,value:[number,number,number]){\r\n        if(this.uniforms[name] !== undefined){\r\n            this.gl.uniform3fv(this.uniforms[name].location,value);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets an int uniform on the shader.\r\n     * @param name {string} the name of the uniform\r\n     * @param value {number} value to set\r\n     */\r\n    int(name:string,value:number){\r\n\r\n        if(this.uniforms[name] !== undefined){\r\n            this.gl.uniform1i(this.uniforms[name].location,value);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    float(name:string,value:number){\r\n       if(this.uniforms[name] !== undefined){\r\n           this.gl.uniform1f(this.uniforms[name].location,value);\r\n       }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a mat4 uniform on the shader.\r\n     * @param name {string} the name of the uniform\r\n     * @param value {Array} a 16 component array\r\n     */\r\n    mat4(name:string,value:[\r\n        number,number,number,number,\r\n        number,number,number,number,\r\n        number,number,number,number,\r\n        number,number,number,number\r\n        ]){\r\n\r\n        if(this.uniforms[name] !== undefined){\r\n            this.gl.uniformMatrix4fv(this.uniforms[name].location,false,value);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a mat3 uniform on the shader.\r\n     * @param name {string} the name of the uniform\r\n     * @param value {Array} a 9 component array\r\n     */\r\n    mat3(name:string,value:[\r\n        number,number,number,\r\n        number,number,number,\r\n        number,number,number\r\n        ]){\r\n\r\n        if(this.uniforms[name] !== undefined){\r\n            this.gl.uniformMatrix3fv(this.uniforms[name].location,false,value);\r\n        }\r\n        return this;\r\n    }\r\n};","import {Geometry} from \"../interfaces\";\r\nexport default class Quad implements Geometry {\r\n    vertices:Array<any> = [];\r\n    normals:Array<any> = [];\r\n    uvs:Array<any> = [];\r\n    indices:Array<any> = [];\r\n    constructor() {\r\n        this.vertices = [-1, -1, -1, 4, 4, -1];\r\n    }\r\n}\r\n\r\n","import createFbo from './jirachi/core/fbo'\r\nimport Mesh from \"./jirachi/framework/mesh\";\r\nimport Plane from \"./jirachi/geometry/plane\";\r\nimport pvert from './shaders/plane.vert'\r\nimport pfrag from './shaders/plane.frag'\r\nimport fpvert from './shaders/flipperRender.vert'\r\nimport fpfrag from './shaders/flipperRender.frag'\r\nimport createShader from './jirachi/core/shader'\r\nimport {ShaderFormat, TextureFormat} from \"./jirachi/core/formats\";\r\nimport Quad from \"./jirachi/geometry/quad\";\r\n/**\r\n * Renders images on a plane to an FBO. Assumes all images are the same size.\r\n */\r\nexport default class ImageFlipper {\r\n    gl:any;\r\n    assets:Array<WebGLTexture> = [];\r\n    planeMesh:any;\r\n    planeRenderMesh:any;\r\n    planeShader:any;\r\n    planeRenderShader:any;\r\n    fbo:any;\r\n    idx:number = 0;\r\n    resolution:Array<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param gl {WebGLRenderingContext} A WebGL context\r\n     * @param w {number} width of all the images\r\n     * @param h {number} height of all the images.\r\n     * @param assets {Array} an Array of WebGL textures.\r\n     */\r\n    constructor(gl,w,h,assets:Array<WebGLTexture>) {\r\n        this.fbo = createFbo(gl,new TextureFormat(gl).setWidth(window.innerWidth).setHeight(window.innerHeight));\r\n        this.planeShader = createShader(gl,new ShaderFormat(pvert,pfrag));\r\n        this.planeRenderShader = createShader(gl,new ShaderFormat(fpvert,fpfrag))\r\n        this.planeMesh = new Mesh(this.planeShader,new Plane(w,h)).setFbo(this.fbo);\r\n\r\n        let quad = new Quad();\r\n        let planeRender = new Mesh(this.planeRenderShader);\r\n        planeRender.addAttribute('position',quad.vertices,{\r\n            size:2\r\n        });\r\n        this.planeRenderMesh = planeRender\r\n\r\n        this.gl = gl;\r\n        this.assets = assets;\r\n\r\n    }\r\n\r\n    /**\r\n     * Return the current output\r\n     */\r\n    getOutput(){\r\n        return this.fbo.getColorTexture();\r\n    }\r\n\r\n    update(camera){\r\n        // update scene\r\n        this.assets[this.idx][\"bind\"](0);\r\n        this.planeMesh.draw(camera);\r\n\r\n        // make sure there are no bound textures\r\n        this.gl.unbindTexture();\r\n\r\n    }\r\n\r\n    draw(camera){\r\n        let gl = this.gl;\r\n        this.fbo.getColorTexture().bind(0);\r\n        this.planeRenderMesh.draw(camera);\r\n        this.planeRenderMesh.shader.int(\"uTex0\",0);\r\n    }\r\n\r\n    next(){\r\n        if(this.idx < this.assets.length){\r\n            this.idx += 1;\r\n        }else{\r\n            this.idx = 0;\r\n        }\r\n    }\r\n\r\n    previous(){\r\n        if(this.idx > 0){\r\n            this.idx -= 1;\r\n        }else{\r\n            this.idx = this.assets.length - 1;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Resizes all litems\r\n     * @param w {number} new width\r\n     * @param h {number} new height\r\n     */\r\n    resize(w,h){\r\n        this.planeMesh = new Mesh(this.planeShader,new Plane(30,30)).setFbo(this.fbo);\r\n        this.fbo.resize(window.innerWidth,window.innerHeight);\r\n    }\r\n\r\n}","import vao from '../core/vao'\r\nimport vbo from '../core/vbo'\r\nimport createShader from '../core/shader'\r\nimport {ShaderFormat} from \"../core/formats\";\r\n\r\n/**\r\n * A helper for dealing with transform feedback operations.\r\n */\r\nclass TransformFeedback {\r\n    gl:any;\r\n    vaos:[any,any];\r\n    attributes:Array<any> = []\r\n    varyings:Array<any> = [];\r\n\r\n    // GLenum dictating how to treat data ie gl.POINTS, gl.TRIANGLES etc.\r\n    feedbackPrim:number;\r\n\r\n    feedbackMode:number;\r\n\r\n    // number of items to update\r\n    numItems:number;\r\n\r\n    flag:number = 0;\r\n\r\n    shader:any = null;\r\n\r\n    tf:any;\r\n\r\n    constructor(gl,{\r\n        numItems = 100\r\n    }={}){\r\n        this.gl = gl;\r\n\r\n        this.tf = gl.createTransformFeedback();\r\n        this.feedbackMode = gl.SEPARATE_ATTRIBS;\r\n        this.numItems = numItems;\r\n        this.feedbackPrim = gl.POINTS;\r\n\r\n        this.vaos = [\r\n            vao(gl),\r\n            vao(gl)\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Binds vao for use\r\n     */\r\n    bind(){\r\n        this.vaos[this.flag].bind();\r\n    }\r\n\r\n    /**\r\n     * Unbinds currently bound vao.\r\n     */\r\n    unbind(){\r\n        this.vaos[this.flag].unbind();\r\n    }\r\n\r\n    addAttribute(name:string,data:Array<any>,{\r\n        size=3,\r\n        normalized=this.gl.FALSE,\r\n        format=this.gl.FLOAT,\r\n        stride=0,\r\n        offset=0\r\n    }={}){\r\n\r\n        let arr = new Float32Array(data);\r\n        let gl = this.gl;\r\n\r\n\r\n        let buffer,buffer2;\r\n        let loc = this.attributes.length;\r\n\r\n        for(let i = 0 ;i < 2; ++i){\r\n\r\n            // bind vao and build buffer for attribute\r\n            this.vaos[i].bind();\r\n            buffer = vbo(this.gl,false,arr);\r\n            buffer2 = vbo(this.gl,false,arr);\r\n\r\n            buffer.bind();\r\n            gl.vertexAttribPointer(loc,size,format,normalized,stride,offset);\r\n            gl.enableVertexAttribArray(loc)\r\n            buffer.unbind();\r\n\r\n            buffer2.bind();\r\n            gl.vertexAttribPointer(loc,size,format,normalized,stride,offset);\r\n            gl.enableVertexAttribArray(loc)\r\n            buffer2.unbind();\r\n            this.vaos[i].unbind();\r\n\r\n        }\r\n\r\n        // add attribute to the list.\r\n        this.attributes.push({\r\n            vbos:[buffer,buffer2],\r\n            location: loc,\r\n            size: size,\r\n            type: format,\r\n            normalized: normalized,\r\n            stride: stride,\r\n            offset: offset,\r\n            name: name\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    update(){\r\n\r\n        if(this.shader === null){\r\n            return;\r\n        }\r\n        let gl = this.gl;\r\n        let src = this.flag;\r\n        let dst = (this.flag + 1) % 2;\r\n\r\n        this.shader.bind();\r\n\r\n        this.vaos[src].bind();\r\n\r\n        // discard fragment stage\r\n        gl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n        // start transform feedback\r\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.tf);\r\n\r\n        // bind all the buffers to read data from transform feedback process\r\n        this._bindBufferBase(dst);\r\n        this._enableVertexAttribs();\r\n\r\n        // start transform feedback\r\n        gl.beginTransformFeedback(this.feedbackPrim);\r\n        gl.drawArrays(this.feedbackPrim, 0, this.numItems);\r\n        gl.endTransformFeedback();\r\n\r\n\r\n        this.vaos[src].unbind();\r\n\r\n        this._unbindBufferBase();\r\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n        gl.disable(gl.RASTERIZER_DISCARD);\r\n        this.flag =  (this.flag + 1) % 2;\r\n    }\r\n\r\n    setShader(vertex:string,varyings:Array<string>,uniforms:Array<any>){\r\n\r\n        if(varyings.length > 0){\r\n            varyings.forEach(varying => { this.addVarying(varying); })\r\n        }\r\n        let shaderSource = {\r\n            vertex:vertex,\r\n            fragment:[\r\n                'precision highp float;',\r\n                'out vec4 glFragColor;',\r\n                'void main(){',\r\n                'glFragColor = vec4(1.);',\r\n                '}'\r\n            ]\r\n        }\r\n\r\n        this.shader = createShader(this.gl,new ShaderFormat()\r\n            .vertexSource(shaderSource.vertex)\r\n            .fragmentSource(shaderSource.fragment.join(\"\"))\r\n            .setVaryings(this.varyings)\r\n            .setFeedbackMode(this.feedbackMode));\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Add varying\r\n     */\r\n    addVarying(name:string){\r\n        this.varyings.push(name);\r\n        return this;\r\n    }\r\n\r\n    _bindBufferBase(flag){\r\n        let gl = this.gl;\r\n        let len = this.attributes.length;\r\n        for(let i = 0; i < len; ++i){\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i,this.attributes[i].vbos[flag]);\r\n        }\r\n    }\r\n\r\n    _unbindBufferBase(){\r\n        let gl = this.gl;\r\n        let len = this.attributes.length;\r\n        for(let i = 0; i < len; ++i){\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i,null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables buffer attribute arrays during the update cycle.\r\n     * @private\r\n     */\r\n    _enableVertexAttribs(){\r\n        let gl = this.gl;\r\n        let len = this.attributes.length;\r\n        this.vaos[this.flag].bind();\r\n\r\n        for(let i = 0; i < len; ++i){\r\n            let attrib = this.attributes[i];\r\n            let buffer = this.attributes[i].vbos[this.flag];\r\n\r\n            buffer.bind();\r\n            gl.vertexAttribPointer(i,attrib.size,attrib.type,attrib.normalized,attrib.stride,attrib.offset);\r\n            gl.enableVertexAttribArray(i)\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns VBO of data\r\n     * @param name {string} name of the attribute to retrieve.\r\n     */\r\n    getAttributeData(name:string){\r\n        for(let i = 0; i < this.attributes.length; ++i){\r\n            if(this.attributes[i].name !== undefined){\r\n                return this.attributes[i].vbos[this.flag];\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TransformFeedback;","/**\r\n * Flattens an nested array that is assumed to be nested with child arrays used in place of\r\n * an actual vector object. Note, this does not check for completeness and will automatically\r\n * only take the first 3 values of the child arrays\r\n * @param array the parent array\r\n * @param reSize {Number} the size of each nested array. Determines  how the array is unrolled.\r\n * @returns {Array}\r\n */\r\nexport function flattenArray(array:[],reSize:number=3){\r\n\r\n    let fin = [];\r\n    let len = array.length;\r\n    for(let i = 0; i < len; ++i){\r\n        let arr = array[i];\r\n\r\n        if(reSize === 4){\r\n            fin.push(arr[0],arr[1],arr[2],arr[3]);\r\n        }else if(reSize === 3){\r\n            fin.push(arr[0],arr[1],arr[2]);\r\n        }else{\r\n            fin.push(arr[0],arr[1]);\r\n        }\r\n    }\r\n\r\n    // map through to ensure we don't have any unknown / undefined values.\r\n    // if so, set to 0\r\n    fin = fin.map(itm => {\r\n        if(itm === undefined || itm === null){\r\n            return 0.0;\r\n        }else{\r\n            return itm;\r\n        }\r\n\r\n    })\r\n\r\n    return fin;\r\n}\r\n\r\n/**\r\n * Does subtraction between two arrays. Assumes both arrays have 3 values each inside\r\n * @param array1 {Array} the array to subtract from\r\n * @param array2 {Array} the array to subtract\r\n * @returns {*[]}\r\n */\r\nexport function subArrays(array1:Array<number>,array2:Array<number>){\r\n\r\n    let x1 = array1[0];\r\n    let y1 = array1[1];\r\n    let z1 = array1[2];\r\n\r\n    let x2 = array2[0];\r\n    let y2 = array2[1];\r\n    let z2 = array2[2];\r\n    return [x1 - x2, y1 - y2, z1 - z2];\r\n}\r\n\r\n/**\r\n * Adds 2 arrays together\r\n * @param array1 {Array} array 1\r\n * @param array2 {Array} array 2\r\n */\r\nexport function addArrays(array1:Array<number>,array2:Array<number>){\r\n\r\n    let x1 = array1[0];\r\n    let y1 = array1[1];\r\n    let z1 = array1[2];\r\n\r\n    let x2 = array2[0];\r\n    let y2 = array2[1];\r\n    let z2 = array2[2];\r\n    return [x1 + x2, y1 + y2, z1 + z2];\r\n}\r\n\r\n/**\r\n * Multiplies all elements in an array by a scalar value\r\n * @param array1 {Array} an array to multiply against\r\n * @param scalar {number} the scalar value.\r\n */\r\nexport function multiplyScalar(array1:Array<number>,scalar:number){\r\n\r\n    let x1 = array1[0];\r\n    let y1 = array1[1];\r\n    let z1 = array1[2];\r\n\r\n    return [x1 * scalar, y1 * scalar, z1 * scalar];\r\n}\r\n\r\n\r\n/**\r\n * Converts value to radians\r\n * @param deg{number} a value in degrees\r\n */\r\nexport function toRadians(deg:number){\r\n    return (deg * Math.PI) / 180;\r\n}\r\n\r\n\r\n/**\r\n * Normalizes the values in an array\r\n * @param vec {Array} the array to  normalize.\r\n */\r\nexport function normalizeArray(vec:Array<number>){\r\n    var mag = 0\r\n    for (var n = 0; n < vec.length; n++) {\r\n        mag += vec[n] * vec[n]\r\n    }\r\n    mag = Math.sqrt(mag)\r\n\r\n    // avoid dividing by zero\r\n    if (mag === 0) {\r\n        return Array.apply(null, new Array(vec.length)).map(Number.prototype.valueOf, 0)\r\n    }\r\n\r\n    for (var n = 0; n < vec.length; n++) {\r\n        vec[n] /= mag\r\n    }\r\n\r\n    return vec\r\n}\r\n\r\n/**\r\n * Cross function.\r\n * @param a first \"vector\" / array\r\n * @param b second \"vector\" / array\r\n * @returns {[*,*,*]}\r\n */\r\nexport function cross(a,b){\r\n    if(a.length === 3 && b.length === 3){\r\n        let a1 = a[0];\r\n        let a2 = a[1];\r\n        let a3 = a[2];\r\n        let b1 = b[0];\r\n        let b2 = b[1];\r\n        let b3 = b[2];\r\n\r\n        return [a2 * b3 - a3 * b2, a3 * b1 - a1 * b3, a1 * b2 - a2 * b1]\r\n    }\r\n}\r\n\r\n/**\r\n * Creates an array with a range of values\r\n * @param from {Number} the value to start from\r\n * @param to {Number} the value end at.\r\n * @returns {Array}\r\n */\r\nexport function range(from,to){\r\n    var result = [];\r\n    var n = from;\r\n    while (n < to) {\r\n        result.push(n);\r\n        n += 1;\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a random vec3(in the form of an array)\r\n * @returns {*[]}\r\n */\r\nexport function randVec3(offset=1){\r\n    return[\r\n        Math.random() * offset,\r\n        Math.random() * offset,\r\n        Math.random() * offset\r\n    ]\r\n}\r\nexport function randVec4(offset=1){\r\n    return[\r\n        Math.random() * offset,\r\n        Math.random() * offset,\r\n        Math.random() * offset,\r\n        Math.random() * offset\r\n    ]\r\n}\r\n/**\r\n * Performs linear interpolation of a value\r\n * @param value the value to interpolate\r\n * @param min the minimum value\r\n * @param max the maximum value\r\n * @returns {number}\r\n */\r\nexport function lerp(value:number,min:number=0,max:number=1){\r\n    return  min + (max -min) * value;\r\n}\r\n\r\n/**\r\n * Smoothly ease into values.\r\n * Taken from THREE.Math\r\n * @param x {Number} value to modify\r\n * @param min {Number}\r\n * @param max {Number}\r\n * @returns {number}\r\n */\r\nexport function smoothStep(x:number,min:number,max:number){\r\n    if(x <= min) return 0;\r\n    if(x >= max) return 1;\r\n    x = (x - min) / (max - min);\r\n    return x * x * (3 - 2 * x);\r\n}\r\n\r\n/**\r\n * Returns a random float value between two numbers\r\n * @param min {Number} the minimum value\r\n * @param max {Number} the maximum value\r\n * @returns {number}\r\n */\r\nexport function randFloat(min:number=0,max:number=1){\r\n    return min + Math.random() * (max - min + 1);\r\n}\r\n\r\n/**\r\n * Returns a random integer value between two numbers\r\n * @param min {Number} the minimum value\r\n * @param max {Number} the maximum value\r\n * @returns {number}\r\n */\r\nexport function randInt(min:number=0,max:number=1){\r\n    return Math.floor(min + Math.random() * (max - min + 1));\r\n}\r\n\r\n/**\r\n * Very simple array cloning util.\r\n * Note - only works with arrays who have 3 elements\r\n * @param arrayToClone the array to clone\r\n * @returns {*[]} the new array\r\n */\r\nexport function cloneArray(arrayToClone:[number,number,number]){\r\n    return [\r\n        arrayToClone[0],\r\n        arrayToClone[1],\r\n        arrayToClone[2]\r\n    ]\r\n}\r\n\r\n/**\r\n * Ensures a value lies in between a min and a max\r\n * @param value\r\n * @param min\r\n * @param max\r\n * @returns {*}\r\n */\r\nexport function clamp(value:number,min:number,max:number){\r\n    return min < max\r\n        ? (value < min ? min : value > max ? max : value)\r\n        : (value < max ? max : value > min ? min : value)\r\n}\r\n\r\n\r\n/**\r\n * Returns the magnitude of a 3 component vector\r\n * @param v {Array}\r\n */\r\nexport function magnitudeOfVector(v:[number,number,number]){\r\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\r\n}\r\n\r\n/**\r\n * Normalizes a 3 component vector.\r\n * @param out {Array} where values get assigned to\r\n * @param v {Array} the array to normalize.\r\n */\r\nexport function normalizeVector(out:[number,number,number],v:[number,number,number]){\r\n    let inverseMagnitude = 1.0 / magnitudeOfVector(v);\r\n    out[0] = v[0] * inverseMagnitude;\r\n    out[1] = v[1] * inverseMagnitude;\r\n    out[2] = v[2] * inverseMagnitude;\r\n    return out;\r\n}","import TransformFeedback from './jirachi/framework/TransformFeedback'\r\nimport createShader from './jirachi/core/shader'\r\nimport {flattenArray, randVec3, randVec4} from \"./jirachi/math/core\";\r\nimport {ShaderFormat} from \"./jirachi/core/formats\";\r\n\r\n\r\n\r\n// import shaders\r\nimport vert from './shaders/petalSim.glsl'\r\nimport rVert from './shaders/petalRender.vert'\r\nimport rFrag from './shaders/petalRender.frag'\r\nimport rotate from './jirachi/shaders/utils.glsl'\r\nimport noise from './jirachi/shaders/noise/curl.glsl'\r\nimport Mesh from \"./jirachi/framework/mesh\";\r\n\r\n\r\nexport default class ParticleSystem{\r\n    gl:any;\r\n    numParticles:number;\r\n    tf:TransformFeedback;\r\n    renderShader:any;\r\n    petal:Mesh;\r\n    resolution:[number,number];\r\n    constructor(gl,geo,resolution:[number,number],numParticles=100) {\r\n\r\n        this.gl = gl;\r\n        this.numParticles = numParticles;\r\n\r\n        this.tf = new TransformFeedback(gl,{\r\n            numItems:numParticles\r\n        });\r\n\r\n        let simShader = [\r\n            noise,\r\n            vert\r\n        ].join(\"\\n\");\r\n\r\n        this.resolution = resolution;\r\n\r\n        // set transform feedback shader.\r\n        this.tf.setShader(simShader,[\r\n            \"oPos\",\r\n            \"oVel\"\r\n        ],[\"time\"]);\r\n\r\n\r\n        this.renderShader = createShader(gl,new ShaderFormat()\r\n            .vertexSource([\r\n                rotate,\r\n                rVert\r\n            ].join(\"\\n\"))\r\n            .fragmentSource(rFrag));\r\n\r\n        this._loadGeometry(geo)\r\n\r\n    }\r\n\r\n\r\n    draw(camera){\r\n        let perf = performance.now() * 0.005;\r\n        // TODO enable alpha blending\r\n\r\n        // update transform feedback\r\n        this.tf.update();\r\n        this.tf.shader.float(\"time\",performance.now() * 0.0005);\r\n\r\n\r\n\r\n        this.petal.draw(camera);\r\n        this.petal.shader.float(\"time\",perf);\r\n        this.petal.uniform(\"projectionMatrix\",camera.projectionMatrix)\r\n            .uniform(\"modelViewMatrix\",camera.viewMatrix)\r\n            .uniform(\"resolution\",this.resolution);\r\n    }\r\n\r\n    _build(){\r\n\r\n        let positions = [];\r\n        let velocity = [];\r\n        let originData = [];\r\n\r\n        for(let i = 0; i < this.numParticles; ++i){\r\n\r\n            // setup particle position\r\n            let position = randVec4();\r\n\r\n            // setup particle velocity\r\n            let vel = [0,0,0]\r\n\r\n            positions.push(...position);\r\n            velocity.push(...vel);\r\n            originData.push(position[0],position[1],position[2]);\r\n        }\r\n\r\n        // add attributes to keep track of.\r\n        // note - position w will hold particle life.\r\n        this.tf.addAttribute(\"position\",positions,{\r\n            size:4\r\n        });\r\n        this.tf.addAttribute(\"velocity\",velocity);\r\n\r\n        this.tf.addAttribute(\"origin\",originData);\r\n\r\n    }\r\n\r\n    /**\r\n     * Load petal geometry\r\n     * @param assets\r\n     * @private\r\n     */\r\n    _loadGeometry(petal){\r\n\r\n\r\n        this._build();\r\n        let petalGeo = petal;\r\n        // flatten arrays\r\n        let positions = flattenArray(petalGeo.positions);\r\n        let uvs = flattenArray(petalGeo.coords,2);\r\n\r\n        // setup random scale\r\n        let scale = [];\r\n        for(let i = 0; i < this.numParticles;++i){\r\n            scale.push(Math.random() + 1.0);\r\n        }\r\n\r\n\r\n        this.petal = new Mesh(this.renderShader)\r\n        this.petal.addAttribute(\"position\",positions);\r\n        this.petal.addInstancedAttributeBuffer(\"iPosition\",this.tf.getAttributeData(\"position\"),{\r\n            size:4,\r\n            numItems:100\r\n        });\r\n        this.petal.addInstancedAttribute(\"iScale\",scale,{\r\n            size:1\r\n        });\r\n\r\n\r\n        this.petal.numItems = this.numParticles;\r\n\r\n    }\r\n}","\r\n\r\n// adapted from\r\n// https://github.com/yiwenl/Alfrid/blob/master/src/alfrid/loaders/ObjLoader.js\r\n// Loads .obj files\r\nclass ObjLoader {\r\n    path:string;\r\n    constructor(path:string = \"\"){\r\n\r\n        this.path = path;\r\n\r\n    }\r\n\r\n    /**\r\n     * Loads an model based on it's string form\r\n     * @param path {string} the model string.\r\n     */\r\n    loadModel(path:string=\"\"){\r\n        path = path !== \"\" ? path : this.path;\r\n\r\n        if(path !== \"\"){\r\n\r\n            return ObjLoader.parse(path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an .obj file from a url\r\n     * @param path {string} the path to the model.\r\n     */\r\n    loadModelFromUrl(path:string = \"\"){\r\n        path = path !== \"\" ? path : this.path;\r\n\r\n        if(path !== \"\"){\r\n\r\n            return new Promise((res,rej) => {\r\n\r\n                fetch(path).then(res => {\r\n                    return res.text();\r\n                }).then(data => {\r\n                    let _model = ObjLoader.parse(data);\r\n                    res(_model);\r\n                }).catch(e => {\r\n                    rej(e);\r\n                })\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    static parse(objStr) {\r\n        const lines = objStr.split('\\n');\r\n\r\n        const positions    = [];\r\n        const coords       = [];\r\n        const finalNormals = [];\r\n        const vertices     = [];\r\n        const normals      = [];\r\n        const uvs          = [];\r\n        const indices      = [];\r\n        let count        = 0;\r\n        let result;\r\n\r\n        // v float float float\r\n        const vertexPattern = /v( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/;\r\n\r\n        // vn float float float\r\n        const normalPattern = /vn( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/;\r\n\r\n        // vt float float\r\n        const uvPattern = /vt( +[\\d|\\.|\\+|\\-|e|E]+)( +[\\d|\\.|\\+|\\-|e|E]+)/;\r\n\r\n        // f vertex vertex vertex ...\r\n        const facePattern1 = /f( +-?\\d+)( +-?\\d+)( +-?\\d+)( +-?\\d+)?/;\r\n\r\n        // f vertex/uv vertex/uv vertex/uv ...\r\n        const facePattern2 = /f( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))?/;\r\n\r\n        // f vertex/uv/normal vertex/uv/normal vertex/uv/normal ...\r\n        const facePattern3 = /f( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))?/;\r\n\r\n        // f vertex//normal vertex//normal vertex//normal ...\r\n        const facePattern4 = /f( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))?/;\r\n\r\n\r\n        function parseVertexIndex(value) {\r\n            const index = parseInt(value);\r\n            return (index >= 0 ? index - 1 : index + vertices.length / 3) * 3;\r\n        }\r\n\r\n        function parseNormalIndex(value) {\r\n            const index = parseInt(value);\r\n            return (index >= 0 ? index - 1 : index + normals.length / 3) * 3;\r\n        }\r\n\r\n        function parseUVIndex(value) {\r\n            const index = parseInt(value);\r\n            return (index >= 0 ? index - 1 : index + uvs.length / 2) * 2;\r\n        }\r\n\r\n\r\n        function addVertex(a, b, c) {\r\n            positions.push([vertices[a], vertices[a + 1], vertices[a + 2]]);\r\n            positions.push([vertices[b], vertices[b + 1], vertices[b + 2]]);\r\n            positions.push([vertices[c], vertices[c + 1], vertices[c + 2]]);\r\n\r\n            indices.push(count * 3 + 0);\r\n            indices.push(count * 3 + 1);\r\n            indices.push(count * 3 + 2);\r\n\r\n            count ++;\r\n        }\r\n\r\n\r\n        function addUV(a, b, c) {\r\n            coords.push([uvs[a], uvs[a + 1]]);\r\n            coords.push([uvs[b], uvs[b + 1]]);\r\n            coords.push([uvs[c], uvs[c + 1]]);\r\n        }\r\n\r\n\r\n        function addNormal(a, b, c) {\r\n            finalNormals.push([normals[a], normals[a + 1], normals[a + 2]]);\r\n            finalNormals.push([normals[b], normals[b + 1], normals[b + 2]]);\r\n            finalNormals.push([normals[c], normals[c + 1], normals[c + 2]]);\r\n        }\r\n\r\n        function addFace(a, b, c, d,  ua?, ub?, uc?, ud?,  na?, nb?, nc?, nd?) {\r\n            let ia = parseVertexIndex(a);\r\n            let ib = parseVertexIndex(b);\r\n            let ic = parseVertexIndex(c);\r\n            let id;\r\n\r\n            if (d === undefined) {\r\n\r\n                addVertex(ia, ib, ic);\r\n\r\n            } else {\r\n\r\n                id = parseVertexIndex(d);\r\n\r\n                addVertex(ia, ib, id);\r\n                addVertex(ib, ic, id);\r\n\r\n            }\r\n\r\n\r\n            if (ua !== undefined) {\r\n\r\n                ia = parseUVIndex(ua);\r\n                ib = parseUVIndex(ub);\r\n                ic = parseUVIndex(uc);\r\n\r\n                if (d === undefined) {\r\n\r\n                    addUV(ia, ib, ic);\r\n\r\n                } else {\r\n\r\n                    id = parseUVIndex(ud);\r\n\r\n                    addUV(ia, ib, id);\r\n                    addUV(ib, ic, id);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (na !== undefined) {\r\n\r\n                ia = parseNormalIndex(na);\r\n                ib = parseNormalIndex(nb);\r\n                ic = parseNormalIndex(nc);\r\n\r\n                if (d === undefined) {\r\n\r\n                    addNormal(ia, ib, ic);\r\n\r\n                } else {\r\n\r\n                    id = parseNormalIndex(nd);\r\n\r\n                    addNormal(ia, ib, id);\r\n                    addNormal(ib, ic, id);\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        for (let i = 0; i < lines.length; i ++) {\r\n            let line = lines[i];\r\n            line = line.trim();\r\n\r\n            if (line.length === 0 || line.charAt(0) === '#') {\r\n\r\n                continue;\r\n\r\n            } else if ((result = vertexPattern.exec(line)) !== null) {\r\n\r\n                vertices.push(\r\n                    parseFloat(result[1]),\r\n                    parseFloat(result[2]),\r\n                    parseFloat(result[3])\r\n                );\r\n\r\n            } else if ((result = normalPattern.exec(line)) !== null) {\r\n\r\n                normals.push(\r\n                    parseFloat(result[1]),\r\n                    parseFloat(result[2]),\r\n                    parseFloat(result[3])\r\n                );\r\n\r\n            } else if ((result = uvPattern.exec(line)) !== null) {\r\n\r\n                uvs.push(\r\n                    parseFloat(result[1]),\r\n                    parseFloat(result[2])\r\n                );\r\n\r\n            } else if ((result = facePattern1.exec(line)) !== null) {\r\n\r\n                addFace(\r\n                    result[1], result[2], result[3], result[4]\r\n                );\r\n\r\n            } else if ((result = facePattern2.exec(line)) !== null) {\r\n\r\n                addFace(\r\n                    result[2], result[5], result[8], result[11],\r\n                    result[3], result[6], result[9], result[12]\r\n                );\r\n\r\n            } else if ((result = facePattern3.exec(line)) !== null) {\r\n                addFace(\r\n                    result[2], result[6], result[10], result[14],\r\n                    result[3], result[7], result[11], result[15],\r\n                    result[4], result[8], result[12], result[16]\r\n                );\r\n\r\n            } else if ((result = facePattern4.exec(line)) !== null) {\r\n                addFace(\r\n                    result[2], result[5], result[8], result[11],\r\n                    undefined, undefined, undefined, undefined,\r\n                    result[3], result[6], result[9], result[12]\r\n                );\r\n\r\n            }\r\n        }\r\n\r\n        return {\r\n            positions:positions,\r\n            coords:coords,\r\n            normals:finalNormals,\r\n            indices:indices\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ObjLoader;","import createRenderer from './jirachi/core/gl'\r\nimport {PerspectiveCamera} from './jirachi/framework/camera'\r\nimport Mesh from \"./jirachi/framework/mesh\";\r\nimport Plane from \"./jirachi/geometry/plane\";\r\nimport pvert from './shaders/plane.vert'\r\nimport pfrag from './shaders/plane.frag'\r\nimport fpvert from './shaders/flipperRender.vert'\r\nimport fpfrag from './shaders/flipperRender.frag'\r\nimport createShader from './jirachi/core/shader'\r\nimport {ShaderFormat, TextureFormat} from \"./jirachi/core/formats\";\r\nimport createTexture from './jirachi/core/texture'\r\nimport createFbo from './jirachi/core/fbo'\r\nimport Quad from \"./jirachi/geometry/quad\";\r\nimport ImageFlipper from \"./ImageFlipper\";\r\nimport ParticleSystem from \"./ParticleSystem\";\r\nimport ObjLoader from \"./jirachi/loaders/ObjLoader\";\r\n\r\n// -----------------------------------------\r\nlet ps = null;\r\nlet tex = null;\r\nlet img = new Image();\r\nlet flipper = null;\r\nlet fbo = null;\r\n// --------------------------\r\nconst gl = createRenderer()[\"setFullscreen\"]();\r\ndocument.body.appendChild(gl.canvas);\r\n\r\nfbo = createFbo(gl,new TextureFormat(gl).setWidth(window.innerWidth).setHeight(window.innerHeight));\r\n\r\nconst camera = new PerspectiveCamera({\r\n    near:0.1,\r\n    far:10000.0,\r\n    aspect: gl.canvas.width / gl.canvas.height,\r\n});\r\n\r\ncamera.setZoom(-50);\r\n\r\nimg.src = \"/assets/thumb.jpg\"\r\nwindow.addEventListener('resize',e =>{\r\n\r\n    flipper.resize(1024,768);\r\n});\r\n// ============== BUILD PLANE ================== //\r\n\r\nfetch(\"/assets/petal.txt\").then(res =>{\r\n    return res.text();\r\n}).then(res =>{\r\n    ps = new ParticleSystem(gl,ObjLoader.parse(res),[window.innerWidth,window.innerHeight],10000)\r\n\r\n});\r\n\r\n\r\nimg.onload = () =>{\r\n    flipper = new ImageFlipper(gl,img.width,img.height,[createTexture(gl,new TextureFormat(gl,{\r\n        data:img\r\n    }))]);\r\n    animate();\r\n};\r\n\r\nfunction animate(){\r\n    requestAnimationFrame(animate);\r\n    gl.clearScreen();\r\n\r\n    if(flipper && ps){\r\n        flipper.update(camera);\r\n        flipper.getOutput().bind();\r\n        ps.draw(camera);\r\n\r\n    }\r\n\r\n}"],"sourceRoot":""}